<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f711b422-efbe-4fc6-a28f-583cb4775175" created="2.1.0" activeEnvironment="Default environment" name="API_Route" resourceRoot="" updated="2.1.0 20170726-1100" abortOnError="false" runType="SEQUENTIAL" soapui-version="5.2.1" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="94ca7ff4-e4fc-4503-a4bd-cf161445d63c" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetByRouteKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://http</con:endpoint></con:endpoints><con:resource name="GetByRouteKey" path="/platformservice/api/v1/routes/{key}" id="f5b957a5-4ea3-422b-bf7b-da97fdeda943"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeTenant</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeApplication</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeDeployment</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetByRouteKey" id="2e46952c-a5ab-4915-8870-1719113a5fa5" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:apr="http://dc2devrmapp44.prod.tangoe.com/v1/routes/APR-RVM">apr:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 400 500</con:status><con:params/><con:element xmlns:apr="http://dc2devrmapp44.prod.tangoe.com/v1/routes/APR-RVM">apr:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetByRouteKey" id="b58ab9e1-e967-438d-a1f8-85c99fac8a0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://http</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="key" value="44"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="6a5f33ef-faab-48f7-973b-93ef30f98678" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeleteRouteByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="DeleteRouteByKey" path="/platformservice/api/v1/routes/{key}" id="e375b19c-dbf2-481c-af3c-f680cc531695"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteRouteByKey" id="9cb430ed-b84d-4a13-a5be-9d93e7f868b0" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 405</con:status><con:params/><con:element xmlns:bad="http://dc2devrmapp44.prod.tangoe.com/v1/routes/BadRoute">bad:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DeleteRouteByKey" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="key" value="33" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="19f306cb-9bae-41f3-b7c3-e4959ec81978" wadlVersion="http://wadl.dev.java.net/2009/02" name="PostRoute" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="PostRoute" path="/platformservice/api/v1/routes" id="6527cf42-c326-4801-8eae-078771d51e6d"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PostRoute" id="29a8f0a8-7b81-45c1-a860-b795ea7b29a8" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 500 404</con:status><con:params/><con:element xmlns:rout="http://a.com/v1/routes">rout:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rout="http://dc2devrmapp44.prod.tangoe.com/v1/routes">rout:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PostRoute" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request>{
  "applicationKey": "string",
  "deploymentKey": "string",
  "enabled": true,
  "key": "string",
  "qualifier": "string",
  "tenantKey": "string"
}</con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="67ba136d-c7a7-4508-a5b3-4bb4787bb6c6" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetRoutes" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint><con:endpoint>http://dc1testrmapp03.prod.tangoe.com:8055</con:endpoint></con:endpoints><con:resource name="GetRoutes" path="/platformservice/api/v1/routes" id="bb5ff0a4-6e05-44e2-8f9a-1d7879879f28"><con:settings/><con:parameters><con:parameter><con:name>applicationKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>tenantKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>deploymentKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>qualifier</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>version</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>enabled</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>sortBy</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>sortDirection</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>page</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>pageSize</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeTenant</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeApplication</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeDeployment</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRoutes" id="564260ee-e315-4d71-b831-78e7aea204f6" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rout="http://dc2devrmapp44.prod.tangoe.com/v1/routes">rout:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 500 404</con:status><con:params/><con:element xmlns:rout="http://dc2devrmapp44.prod.tangoe.com/v1/routes">rout:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="sortDirection" value="55"/>
  <con:entry key="includeApplication" value="77"/>
  <con:entry key="tenantKey" value="44"/>
  <con:entry key="deploymentKey" value="66"/>
  <con:entry key="qualifier" value="33"/>
  <con:entry key="applicationKey" value="55"/>
  <con:entry key="pageSize" value="77"/>
  <con:entry key="includeTenant" value="55"/>
  <con:entry key="sortBy" value="66"/>
  <con:entry key="page" value="55"/>
  <con:entry key="version" value="55"/>
  <con:entry key="enabled" value="33"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="0a963707-cc1a-49aa-9c6a-bb86c11dbde6" wadlVersion="http://wadl.dev.java.net/2009/02" name="PutRouteByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="PutRouteByKey" path="/platformservice/api/v1/routes/{key}" id="22dcafe5-83d9-448a-9816-deb991d9017a"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PutRouteByKey" id="544d53ec-9be0-4a2e-800c-a30eae89caa6" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 405 400 500</con:status><con:params/><con:element xmlns:rout="http://dc2devrmapp44.prod.tangoe.com/vi/routes">rout:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PutRouteByKey" id="d06606fb-4c57-4859-acea-9dd7b3ab85f7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request>{
  "key": "string",
  "tenantKey": "string",
  "applicationKey": "string",
  "deploymentKey": "string",
  "qualifier": "string",
  "enabled": true
}</con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="key" value="66" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="764ac3fd-3d1c-41fa-8978-eec8bc6c5e00" wadlVersion="http://wadl.dev.java.net/2009/02" name="PutTenantByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="PutTenantByKey" path="/platformservice/api/v1/tenants/{key}" id="1da46ca9-e1d1-4124-a2a2-0e3c596000be"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PutTenantByKey" id="3342f7be-0f50-401f-8a84-f40602965c34" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:baut="http://dc2devrmapp44.prod.tangoe.com/v1/tenant/BAUTO">baut:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PutTenantByKey" id="4b0200e8-83ed-4f98-a973-8346e3ded06e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="key" value="33" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="893fad78-12bd-4554-bbae-7cf96c270975" wadlVersion="http://wadl.dev.java.net/2009/02" name="PutAppByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="PutAppByKey" path="/platformservice/api/v1/applications/{key}" id="6bce1810-df3e-4c5c-b67c-3c6d156481fd"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PutAppByKey" id="dc0f9875-fef9-424d-afb4-4e946d4d88cd" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:ns="http://a.com/v1/applications/33">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PutAppByKey" id="715e316c-ff4b-4219-a33f-f7a768d01fe0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="key" value="33" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="41abb4a7-19a9-4290-8f01-cdbfd2482759" wadlVersion="http://wadl.dev.java.net/2009/02" name="PutDeploymentByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="PutDeploymentByKey" path="/platformservice/api/v1/deployments/{key}" id="8a5ec8f9-4d60-44ed-880c-8cba36844abb"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PutDeploymentByKey" id="93cbb5a4-93d2-4ab3-80f5-40da6f168d77" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:ns="http://dc2devrmapp44.prod.tangoe.com/v1/deployments/33">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PutDeploymentByKey" id="21c4bdb0-4701-4a4d-a29d-f8691e21249a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="key" value="33" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="efc4bdfd-d5a5-4aee-b4fb-2af4772636f1" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetAppsForTenant" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="GetAppsForTenant" path="/platformservice/api/v1/tenants/{Key}/applications" id="3c6605bc-401c-4dab-858e-33c4bdde32ff"><con:settings/><con:parameters><con:parameter><con:name>Key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetAppsForTenant" id="f9edc3bc-01e5-4f55-bb14-fa7ae6ab54db" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://dc1testrmapp03.prod.tangoe.com/api/v1/tenants/BAUTO/applications">app:Response</con:element></con:representation><con:request name="GetAppsForTenant" id="d3c1945d-c241-429a-b20a-3383fd09719b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>Key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="9f4866d0-820f-4ca5-8714-89e5c0304ce0" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetDeploymentsForTenantAndApp" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="GetDeploymentsForTenantAndApp" path="/platformservice/api/v1/tenants/{tenantKey}/applications/{appKey}/deployments" id="3f66595f-4cf9-4030-b658-1a8142c95685"><con:settings/><con:parameters><con:parameter><con:name>tenantKey</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appKey</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetDeploymentsForTenantAndApp" id="908d3ba3-1ae4-42ed-b5de-504f07e5f45e" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405 404</con:status><con:params/><con:element xmlns:dep="http://a.com/api/v1/tenants/%24%7B%23TestCase%23TenantKey/applications/deployments">dep:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dep="http://a.com/api/v1/tenants/%24%7B%23TestCase%23TenantKey/applications/deployments">dep:Response</con:element></con:representation><con:request name="GetDeploymentsForTenantAndApp" id="94594e2b-2c28-49e2-9346-f708508dae7b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>tenantKey</con:entry><con:entry>appKey</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="41916671-f29e-4389-b2e6-d907a0979701" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeleteTenantByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="DeleteTenantByKey" path="/platformservice/api/v1/tenants/{key}" id="8f462dd1-cca8-4e9a-ade7-cefe998b10db"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteTenantByKey" id="5fe258c7-1618-4ac1-b872-79d63bdf06cf" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 405</con:status><con:params/><con:element xmlns:apr="http://a.com/api/v1/tenants/APR">apr:Fault</con:element></con:representation><con:request name="DeleteTenantByKey" id="e9ab011c-70f3-4da9-8f97-98ea50f34ba4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e86a1427-7156-4bcc-b523-63b86ac8411e" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetTenants" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="" path="/platformservice/api/v1/tenants" id="8fa608db-0527-4f64-aaeb-d563abe254f6"><con:settings/><con:parameters><con:parameter><con:name>pageSize</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>applicationKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>deploymentKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="" id="229605a8-45a9-47af-8e3d-6dca525cb050" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ten="http://dc1testrmapp03.prod.tangoe.com/api/v1/tenants">ten:Response</con:element></con:representation><con:request name="Request 1" id="44d49e3b-c891-4a64-b41e-39ba0f0ed3fc" mediaType="application/json"><con:settings/><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>pageSize</con:entry><con:entry>Authorization</con:entry><con:entry>applicationKey</con:entry><con:entry>deploymentKey</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="ac5da7ff-02ed-4976-a5d5-7c0682075e37" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetDeployments" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="GetDeployments" path="/platformservice/api/v1/deployments" id="e58eae64-d5df-4f10-891d-1ee36b637537"><con:settings/><con:parameters><con:parameter><con:name>applicationKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>tenantKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetDeployments" id="a16089a5-d490-4907-90fb-7d0e2eb0a776" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dep="http://dc1testrmapp03.prod.tangoe.com/api/v1/deployments">dep:Response</con:element></con:representation><con:request name="GetDeployments" id="459eb811-951b-448b-9a13-fcea109b5381" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="45886e6d-1003-4209-a8fd-8563d6bf8298" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeleteAppByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="DeleteAppByKey" path="/platformservice/api/v1/applications/{key}" id="445fd389-0263-4961-9660-318d1e1b0472"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteAppByKey" id="f177417c-8ea7-4eda-be36-b449205594c4" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401 400</con:status><con:params/><con:element xmlns:rvm="http://dc1testrmapp03.prod.tangoe.com/api/v1/applications/RVM">rvm:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="DeleteAppByKey" id="0aa47c56-5ffb-4ce7-afd6-eb28d26dc2d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="27ab25ad-a320-4e63-9e69-600ba1c65e85" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetApplications" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="GetApplications" path="/platformservice/api/v1/applications" id="a34ad07d-a370-47d4-bbb8-5c119f9ece56"><con:settings/><con:parameters><con:parameter><con:name>pageSize</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>deploymentKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetApplications" id="d8062525-02d7-42d9-a4bf-5519461a95fb" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://a.com/platformservice/api/v1/applications">app:Response</con:element></con:representation><con:request name="GetApplications" id="f8f6d51a-3074-4861-9b09-f4a56e5f442f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>pageSize</con:entry><con:entry>Authorization</con:entry><con:entry>deploymentKey</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="ea011a1c-6b74-4883-a987-9000281f956e" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeleteDeploymentByKey" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="DeleteDeploymentByKey" path="/platformservice/api/v1/deployments/{key}" id="e1af1ba0-88ab-435e-bd1d-3d4e50e72ba3"><con:settings/><con:parameters><con:parameter><con:name>key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteDeploymentByKey" id="f7c53dd5-1292-4477-beda-c59ce0b1570a" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401 400</con:status><con:params/><con:element xmlns:bob="http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/deployments/BOB_AUTO">bob:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bob="http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/deployments/BOB_AUTO">bob:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="DeleteDeploymentByKey" id="c4a5545a-cbd6-472f-aa6d-d8bb52acfbae" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="d5a0d3e4-32b8-49ec-b224-9dc2ead1ee80" wadlVersion="http://wadl.dev.java.net/2009/02" name="UnassignTenantFromTenant" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a.com</con:endpoint></con:endpoints><con:resource name="UnassignAppFromTenant" path="/platformservice/api/v1/tenants/{tenantKey}/applications/{appKey}" id="f743bbde-0d52-4fe6-a4bd-644943b4e05a"><con:settings/><con:parameters><con:parameter><con:name>tenantKey</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appKey</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UnassignAppFromTenant" id="45104fdc-3911-43ef-a105-b6d094f9e63d" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401 404 400</con:status><con:params/><con:element xmlns:app="http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/tenants/applications/">app:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="UnassignAppFromTenant" id="60b120db-3e14-4342-85cf-eb060834938f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>tenantKey</con:entry><con:entry>appKey</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c06309e1-18ac-432a-8405-8871fe1b250d" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UnassignDeploymentFromTenant" path="/platformservice/api/v1/tenants/{tenantKey}/deployments/{deploymentKey}" id="d97d64e0-fc98-4c25-9cf7-52349502a4cb"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>tenantKey</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>deploymentKey</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UnassignDeploymentFromTenant" id="7958d696-2363-4bd1-b969-45af89ced3d9" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401 404 400</con:status><con:params/><con:element xmlns:bear="http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/tenants/deployments/Bearer%20eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg">bear:Fault</con:element></con:representation><con:request name="UnassignDeploymentFromTenant" id="207232ed-bf99-4d93-a324-eef4c803a2a6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="0d0555da-b244-4e09-a0db-eaee770e33b2" name="TestSuite1_WithAutomation"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="87768840-0930-4bbe-a338-a42f5a5cb998" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Manual" searchProperties="true" timeout="0" disabled="true" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="165fe2cc-2329-4c50-8848-f666c1118bf0"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}



// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***
/*
groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 


String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileName = projectPath + "\\tokenGenerated.txt"

readTokenFromFile(fileName, log, testRunner)

return


// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readTokenFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			SetupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in ReadTokenPair method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void SetupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	if (inputLine.contains("Token"))
	{  
		// log.info strArray[1]
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "Token:" + testRunner.testCase.getPropertyValue("Token")		
	}
	
}
*/
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="8d8ce1c8-2710-44cd-b325-57a223c03122"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2c53053c-df21-4f92-8191-a02cdf880c7d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="tenantKey" value="apr"/>
  <con:entry key="pageSize" value="300"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRoute" id="9dae57a6-dab2-44a4-af75-6dd3dc3bbea2"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRoute" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
   "qualifier": "INSERT",
   "tenantKey": "InsertTenant",
   "applicationKey": "InsertApp",
   "deploymentKey": "InsertDeployment",
   "enabled": true
}
</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="504a17ac-7779-452a-bc86-e26cc005e4b9" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKey" id="e3805124-20bf-4ef8-95d4-fd97616a4104"><con:settings/><con:config service="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="GetByRouteKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKey" id="b58ab9e1-e967-438d-a1f8-85c99fac8a0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/APR-RVM</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b6fcd8f6-d5ed-419b-b3ed-b451571c23e9" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="false"/>
  <con:entry key="includeTenant" value="false"/>
  <con:entry key="key" value="INSERTAPP:INSERTTENANT:INSERT"/>
  <con:entry key="includeDeployment" value="false"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKey" id="bd62975d-6f5e-421b-981c-8101295dd77e"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKey" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/BadRoute</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5da48b30-816a-44af-84bc-3b63d6e190d4" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="INSERTAPP:INSERTTENANT:INSERT"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PutRouteByKey" id="d95844b3-f83e-4e90-905d-0e58040c7cd6"><con:settings/><con:config service="PutRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="PutRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutRouteByKey" id="d06606fb-4c57-4859-acea-9dd7b3ab85f7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
   "key": "INSERTAPP:INSERTTENANT:INSERT",
   "qualifier": "INSERT",
   "tenantKey": "INSERTTENANT",
   "applicationKey": "INSERTAPP",
   "deploymentKey": "INSERTDEPLOYMENT",
   "enabled": false
}
</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/vi/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2dd07b2-4ade-466f-b2b7-8274f12872cf" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="INSERTAPP:INSERTTENANT:INSERT"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxOTkyOTA0OX0.rWZgFd9vVDn9aMFZu2S9ZLlQwJAH9TI0Ywx4_EKxw_jR1FJbhPqCqQyS1bj7sKEJNKOTrn-dNwmrycK2CxYfMw</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9dae57a6-dab2-44a4-af75-6dd3dc3bbea2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d8ce1c8-2710-44cd-b325-57a223c03122</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>165fe2cc-2329-4c50-8848-f666c1118bf0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="5e94c103-358c-489f-a760-d61bb543c50a" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="SandBox" searchProperties="true" timeout="0" disabled="true" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="71dc5335-2698-48fd-8931-ea50716c3fcf"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="f09b522b-9113-4437-96ef-cc0bf8d0dd89"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="84270f81-a587-4555-a062-01991a673258" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="9ca57bbb-d52d-408c-a29a-5bacb78881da"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
def testCase = context.testCase; 
def testStep = testCase.getTestStepByName("GetRoutes");  
def response = testStep.testRequest.messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;

tempListRoutes = []
tempListTenants = []
tempListApps = []
tempListDeploys = []

tempListRoutes = json.routes.key
tempListTenants = json.routes.tenant.key 
tempListTenantsName = json.routes.tenant.name 
tempListApps = json.routes.application.key 
tempListAppsDescript = json.routes.application.description 
tempListDeploys = json.routes.deployment.key 
tempListDeploysVersion = json.routes.deployment.version
tempListEnabled = json.routes.enabled


for(int x = 0; x &lt; json.routes.key.size(); x++)
{
	log.info "routeKey: " + tempListRoutes.get(x)
	log.info "tenantKey: " + tempListTenants.get(x)
	log.info "tenantName: " + tempListTenantsName.get(x)
	log.info "appKey: " + tempListApps.get(x)
	log.info "appDescription: " + tempListAppsDescript.get(x)
	log.info "deployKey: " + tempListDeploys.get(x)
	log.info "deployVersion " + tempListDeploysVersion.get(x)
	log.info "route enabled: " + tempListEnabled.get(x)
	log.info "qual: " + json.routes[x].qualifier
	log.info "-----------------------------"
}



//for(String str : tempList)
//{
//	log.info str
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM2MTg1NH0.U3UBBnlpA195UDd31cJQRQhYihZeWr3aYTujmRVvfu-V_FLR8KdaVn11yxNgwdq-GZM3e2xE5Sy2h1BELOWzMQ</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="3935d494-c603-4dc6-b084-361f503cd149" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="PostDeleteGetRouteBasicAUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="289e900f-2bc8-4ef9-93ed-f65ae97fb4a1"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="READ!!_Init" id="346b9c79-cddd-4db9-96ac-ee973ba06390"><con:settings/><con:config><script>/*
1) Need app = DEP_AUTO
2) Need Deployment = 'Bob_Auto' with App key 'DEP_AUTO' from above
3) Tenant 'Bauto' associated with Dep_Auto app above
4) Connect deployment 'Bob_Auto' to tenant 'Bauto'
5) Route name is 'Route_Auto'

SEE VALUES SHOWN AT VERY BOTTOM OF THIS SCRIPT
 */

// setup test case properties to expected values


String state = "false" // this is for setting include apps include tenant, and include deployment fields.
testRunner.testCase.setPropertyValue("IncludeApplication", state)
testRunner.testCase.setPropertyValue("IncludeTenant", state)
testRunner.testCase.setPropertyValue("IncludeDeployment", state)

// route key, qualifier, and enabled
// testRunner.testCase.setPropertyValue("RouteKey", "ROUTE_AUTO") // old
testRunner.testCase.setPropertyValue("RouteKey", "DEP_AUTO:BAUTO:AUTOMATION") // this type of key was added 12/7/17

//DEP_AUTO:BAUTO:AUTOMATION
testRunner.testCase.setPropertyValue("RouteEnabled", "true")
testRunner.testCase.setPropertyValue("Qualifier", "AUTOMATION")

// tenant
testRunner.testCase.setPropertyValue("TenantKey", "BAUTO")
testRunner.testCase.setPropertyValue("TenantName", "for automation")
testRunner.testCase.setPropertyValue("TenantEnabled", "true")

// application
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("ApplicationName", "bobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationDescription", "descBobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationEnabled", "true")

// deployment
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO")
testRunner.testCase.setPropertyValue("DeployVersion", "good")
testRunner.testCase.setPropertyValue("DeployDescription", "good")
testRunner.testCase.setPropertyValue("DeployClusterName", "don't need")
testRunner.testCase.setPropertyValue("DeployApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployEnabled", "false")

log.info "First Init Complete"

// the tenant, application, and deployment need to be setup as shown below.
 /*
{
   "key": "ROUTE_AUTO",
   "qualifier": "AUTOMATION",
   "tenant":    {
      "key": "BAUTO",
      "name": "for automation",
      "enabled": true
   },
   "application":    {
      "key": "DEP_AUTO",
      "name": "bobDeployTest",
      "description": "descBobDeployTest",
      "enabled": true
   },
   "deployment":    {
      "key": "BOB_AUTO",
      "version": "good",
      "description": "good",
      "clusterName": "don't need",
      "applicationKey": "DEP_AUTO",
      "enabled": false
   },
   "enabled": true
}











  
  */</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKey" id="07d9adac-44d6-4f7c-b53b-b9c2094d6779"><con:settings/><con:config service="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="GetByRouteKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKey" id="b58ab9e1-e967-438d-a1f8-85c99fac8a0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://http/v1/routes/true</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="${#TestCase#IncludeApplication}"/>
  <con:entry key="includeTenant" value="${#TestCase#IncludeTenant}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="${#TestCase#IncludeDeployment}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerificationsShortResponse" id="10e95316-e572-42fa-9356-996c4db5dd70"><con:settings/><con:config><script>import groovy.json.JsonSlurper

GetResponse("GetRouteByKey") // the request has been run, get the response.

// //////////////////////////////////////////////////////////////////////////////////////////////////////
// see if the route is there by looking for the route key. if it's missing, verify the expected errors.
// //////////////////////////////////////////////////////////////////////////////////////////////////////
if(json.key.equals(null))
{
	log.info "It looks like the 'GetRouteByKey' request failed because there is no route key called '" + testRunner.testCase.getPropertyValue("RouteKey") + ". First checking error responses."

	// //////////////////////////////////
	//      verify expected errors.
	// //////////////////////////////////
	
	// status code
	if(!(json.statusCode as String).equals("404"))
	{
		throw new Exception("Status code 404 is not found in failing 'GetRouteByKey' request.")
	}

	// errorCode
	assert((json.errorCode as String).equals("PLATFORM_SERVICE_ROUTE_NOT_FOUND"))

	// message
	assert((json.message as String).equals("Could not find route with key: " + testRunner.testCase.getPropertyValue("RouteKey") as String))

	// ///////////////////////////////////////////////////////////////////
	// Now do a PostRoute to make route for test available.
	// ///////////////////////////////////////////////////////////////////
	log.info "Now doing a PostRoute because Route Key '" + testRunner.testCase.getPropertyValue("RouteKey") + "' was not found in 'GetRouteByKey' request."
	RunGet("PostRoute")

	// /////////////////////////////////////////////
	//   verify PostRoute response is correct.
	// /////////////////////////////////////////////
	String strResult = context.testCase.testSteps["PostRoute"].testRequest.response.responseHeaders // get the response from the delete request.
	actualResponse = strResult.split(":")[2].split("X")[0].trim()

	log.info "ACTUAL = " + strResult
	log.info "ACTUAL = " + actualResponse

	if(!actualResponse.equals("HTTP/1.1 200"))
	{
		log.info "The 'PostRoute' request didn't return expected 'HTTP/1.1 201' response"
		throw new Exception("The 'PostRoute' request didn't return expected 'HTTP/1.1 201' response.")
	}
}

log.info "Now verify the response with short response."

// at this point the test route should be available. run 'GetRouteByKey' and look at the short response that should return. 
// it is a short response because include apps, include tenant, and include deployment fields have been set false.
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

// //////////////////////////////
// verify short response.
// //////////////////////////////
assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey") as String))
assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("Qualifier") as String))
assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled") as String))
assert(json.tenantKey.equals(testRunner.testCase.getPropertyValue("TenantKey") as String))
assert(json.applicationKey.equals(testRunner.testCase.getPropertyValue("ApplicationKey") as String))
assert(json.deploymentKey.equals(testRunner.testCase.getPropertyValue("DeployKey") as String))



// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String request)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(request);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String runThis)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(runThis);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:testStep type="groovy" name="VerificationsLongResponse" id="ad246aea-e2d4-430b-a62f-4a78d0db1748"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// now setup to get back the long response and call 'GetRouteByKey'.
String state = "true" // this is for setting include apps include tenant, and include deployment fields.
testRunner.testCase.setPropertyValue("IncludeApplication", state)
testRunner.testCase.setPropertyValue("IncludeTenant", state)
testRunner.testCase.setPropertyValue("IncludeDeployment", state)

// call and get response.
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

log.info "Now verify the response with long response."

// /////////////////////////////
//   verify long response 
// ///////////////////////////// 
// route 
assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey") as String))
assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("Qualifier") as String))
assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled") as String))
// tenant
assert(json.tenant.key.equals(testRunner.testCase.getPropertyValue("TenantKey") as String))
assert(json.tenant.name.equals(testRunner.testCase.getPropertyValue("TenantName") as String))
assert((json.tenant.enabled as String).equals(testRunner.testCase.getPropertyValue("TenantEnabled") as String))
// application
assert(json.application.key.equals(testRunner.testCase.getPropertyValue("ApplicationKey") as String))
assert(json.application.name.equals(testRunner.testCase.getPropertyValue("ApplicationName") as String))
assert(json.application.description.equals(testRunner.testCase.getPropertyValue("ApplicationDescription") as String))
assert((json.application.enabled as String).equals(testRunner.testCase.getPropertyValue("ApplicationEnabled") as String))
// deployment
assert(json.deployment.key.equals(testRunner.testCase.getPropertyValue("DeployKey") as String))
assert(json.deployment.version.equals(testRunner.testCase.getPropertyValue("DeployVersion") as String))
assert(json.deployment.description.equals(testRunner.testCase.getPropertyValue("DeployDescription") as String))
// assert(json.deployment.clusterName.equals(testRunner.testCase.getPropertyValue("DeployClusterName") as String)) // no longer exists 12/1/17
assert(json.deployment.applicationKey.equals(testRunner.testCase.getPropertyValue("DeployApplicationKey") as String))
assert((json.deployment.enabled as String).equals(testRunner.testCase.getPropertyValue("DeployEnabled") as String))


log.info "Now verify DeleteByKey Passing and Failing."

// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String request)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(request);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String runThis)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(runThis);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRoute" id="18723649-7268-499b-82c1-f4f4e941cee5" disabled="true"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRoute" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteShouldFail" id="459d2f3d-062a-4049-9da4-2f3a549269a4"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteShouldFail" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="d81aa850-72f3-4ce9-8c1e-37e88e8973d8" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41e2601f-16bb-49c5-80ce-30599a77b80e" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_ALREADY_EXISTS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af5a301f-7d2d-415c-a747-f7484f97efc4" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because a route already exists for tenant BAUTO, application DEP_AUTO and qualifier: AUTOMATION.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKey" id="66385f03-fa7c-49c5-9ab9-290db8f864f5"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKey" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/33</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7e28d3b9-81f4-4fdd-9032-941538f0232e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value=" Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKeyShouldFail" id="b7ddc210-48b7-40de-8c21-5547cc71dc9a"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKeyShouldFail" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/ROUTE_AUTO</con:originalUri><con:assertion type="JsonPath Match" id="e6beb31b-4cb1-40d7-b5b3-2b77fbe3ea7d" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>404</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e7f61b1-4ce3-4746-8221-ae165e129fa1" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8360b81f-5151-4cb4-a50a-c3991d59f29a" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Route not found to delete, route key: DEP_AUTO:BAUTO:AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKeyShouldFail" id="453cc8a5-6177-4161-8fb9-eb22a010233a"><con:settings/><con:config service="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="GetByRouteKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKeyShouldFail" id="b58ab9e1-e967-438d-a1f8-85c99fac8a0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/ROUTE_AUTO</con:originalUri><con:assertion type="JsonPath Match" id="7a32c635-7164-4d59-8c2f-011cca526ba8" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>404</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2369fb9-b145-408c-ada4-4e1bbcb2b425" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e140f905-6301-4b30-9a04-87ff9813cbd7" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Could not find route with key: DEP_AUTO:BAUTO:AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKeyShouldFailBadBoolean" id="eeb8443a-fee5-4d60-ba57-d9add0423883"><con:settings/><con:config service="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="GetByRouteKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKeyShouldFailBadBoolean" id="b58ab9e1-e967-438d-a1f8-85c99fac8a0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/44</con:originalUri><con:assertion type="JsonPath Match" id="8a1addc8-9417-4f41-98e9-900d8cb2359a" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e0ddd984-3327-4bdf-91a7-8aed3e1ddb19" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>INVALID_BOOLEAN_PARAMETER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1a377eb-9f9d-4129-8a76-8639b748f337" name="Match content of [message]"><con:configuration><path>$['message']</path><content>includeTenant parameter truex must be either true or false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="truex"/>
  <con:entry key="key" value="44"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteAddBack" id="90f629dc-a2af-454a-857e-5d7bab3d8bcf"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteAddBack" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="43ae25e5-77b4-455a-a6aa-eb7b379b347a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bebc43a4-fe1c-4d37-84f3-d530ba7bdcf1" name="Match content of [key]"><con:configuration><path>$['key']</path><content>DEP_AUTO:BAUTO:AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50838d20-629f-4f0a-ab9d-6686848c2571" name="Match content of [qualifier]"><con:configuration><path>$['qualifier']</path><content>AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bdc14cc9-76be-4c69-a23f-f4d3e259faad" name="Match content of [tenantKey]"><con:configuration><path>$['tenantKey']</path><content>BAUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="121e974e-ea2c-4c20-8e95-3e81316f3667" name="Match content of [applicationKey]"><con:configuration><path>$['applicationKey']</path><content>DEP_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21592664-fee9-4899-a620-a78c4b472603" name="Match content of [deploymentKey]"><con:configuration><path>$['deploymentKey']</path><content>BOB_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f83fdb89-cb7f-457b-b4fb-448b59ff1aaf" name="Match content of [enabled]"><con:configuration><path>$['enabled']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>RouteKey</con:name><con:value>DEP_AUTO:BAUTO:AUTOMATION</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>BAUTO</con:value></con:property><con:property><con:name>TenantName</con:name><con:value>for automation</con:value></con:property><con:property><con:name>TenantEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>ApplicationName</con:name><con:value>bobDeployTest</con:value></con:property><con:property><con:name>ApplicationDescription</con:name><con:value>descBobDeployTest</con:value></con:property><con:property><con:name>ApplicationEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>Qualifier</con:name><con:value>AUTOMATION</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>BOB_AUTO</con:value></con:property><con:property><con:name>IncludeApplication</con:name><con:value>true</con:value></con:property><con:property><con:name>IncludeTenant</con:name><con:value>true</con:value></con:property><con:property><con:name>IncludeDeployment</con:name><con:value>true</con:value></con:property><con:property><con:name>RouteEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>DeployEnabled</con:name><con:value>false</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>DeployVersion</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployDescription</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployClusterName</con:name><con:value>don't need</con:value></con:property><con:property><con:name>DeployApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODcwMzE3N30.x1_rovzmH4xoKZDNHzHBUGUjq2Kf3i0F07cuCf3o8-8LUm2wRwX_uLlJDx0scAnWVLvIFkJMgHJNLzRgG2OwOA</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ad246aea-e2d4-430b-a62f-4a78d0db1748</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>289e900f-2bc8-4ef9-93ed-f65ae97fb4a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="f227d166-0de1-4fba-911c-593b3c718fa7" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="GetRoutesCollectionIncludeFilteringAUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="4b540791-9729-4eca-ad2f-6d301e23da9c"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Init" id="b4324ada-38c5-40c2-ac14-ea16ae2b092a"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("includeTenant", "true")
testRunner.testCase.setPropertyValue("includeApplication", "true")
testRunner.testCase.setPropertyValue("includeDeployment", "true")
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("ApplicationKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("Enabled", "")
testRunner.testCase.setPropertyValue("PageSize", "300")
testRunner.testCase.setPropertyValue("Page", "")</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="831e435d-8ea7-48a2-87f9-19fc1b96a0fc"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1be0254f-1418-484c-aff2-9cd26370b7d5" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="applicationKey" value="${#TestCase#ApplicationKey}"/>
  <con:entry key="pageSize" value="${#TestCase#PageSize}"/>
  <con:entry key="version" value="${#TestCase#Version}"/>
  <con:entry key="enabled" value="${#TestCase#Enabled}"/>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="${#TestCase#includeApplication}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
  <con:entry key="qualifier" value="${#TestCase#Qualifier}"/>
  <con:entry key="includeTenant" value="${#TestCase#includeTenant}"/>
  <con:entry key="page" value="${#TestCase#Page}"/>
  <con:entry key="includeDeployment" value="${#TestCase#includeDeployment}"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SingleItemFilterTests" id="51d5937f-6e21-49b6-af71-482eea7de70b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

GetResponse("GetRoutes")

// store some values from the whole collection.
tempListRouteskey = json.routes.key
tempListRoutesQualifier = json.routes.qualifier
tempListTenantsKey = json.routes.tenant.key 
tempListTenantsName = json.routes.tenant.name 
tempListAppsKey = json.routes.application.key 
tempListDeploysKey = json.routes.deployment.key 
tempListDeploysVersion = json.routes.deployment.version
tempListRoutesEnabled = json.routes.enabled

int initialTotalCount = json.metadata.totalCount // store the total number of items in the collection 
int retIndex = 0; // this stroes an index returned from 'FindFirstSingleItem'.

// //////////////////////////////////////////////////////////////////////////////////////////////////
//     									tenant key filter 
// //////////////////////////////////////////////////////////////////////////////////////////////////

if(FindFirstSingleItem(tempListTenantsKey) > initialTotalCount)
{
	log.info "NOTE!!!!!!! --- not testing 'tenant key filter' "
	log.info tempListTenantsKey
}
else
{
	log.info "Starting tenants filter ------------ " 

	retIndex = FindFirstSingleItem(tempListTenantsKey)
	
	// setup tenant filter, make request, and get response.
	testRunner.testCase.setPropertyValue("TenantKey", tempListTenantsKey.get(retIndex)) 
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	log.info "Index: " + retIndex
	log.info "Filter Item: " + json.routes.tenant.key

	assert(RemoveBrackets(json.routes.key).equals(tempListRouteskey.get(retIndex)))
	if(!json.routes.qualifier.equals([null]))
	{
		assert(RemoveBrackets(json.routes.qualifier).equals(tempListRoutesQualifier.get(retIndex)))
	}
	assert(RemoveBrackets(json.routes.tenant.key).equals(tempListTenantsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.tenant.name).equals(tempListTenantsName.get(retIndex)))
	assert(RemoveBrackets(json.routes.application.key).equals(tempListAppsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.version).equals(tempListDeploysVersion.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.key).equals(tempListDeploysKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.enabled as String).equals(tempListRoutesEnabled.get(retIndex) as String))

	log.info "Done with tenants filter"
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// 								application key filter
// //////////////////////////////////////////////////////////////////////////////////////////////////

// find the first application key that has only one of itself.
retIndex = FindFirstSingleItem(tempListAppsKey)

//log.info "Index: " + retIndex
//log.info initialTotalCount
//log.info tempListAppsKey

if(FindFirstSingleItem(tempListAppsKey) > initialTotalCount)
{
	log.info "NOTE!!!!!!! --- not testing 'application key filter' "
	log.info tempListAppsKey
}
else
{

	retIndex = FindFirstSingleItem(tempListAppsKey)
	
	ClearAllFilters()	

	log.info "Starting applications filter ------------ " 
	
	// setup tenant filter, make request, and get response.
	testRunner.testCase.setPropertyValue("ApplicationKey", tempListAppsKey.get(retIndex)) 
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	log.info "Index: " + retIndex
	log.info "Filter Item: " + json.routes.tenant.key

	// Thread.sleep(500)

	assert(RemoveBrackets(json.routes.key).equals(tempListRouteskey.get(retIndex)))
	if(!json.routes.qualifier.equals([null]))
	{
		assert(RemoveBrackets(json.routes.qualifier).equals(tempListRoutesQualifier.get(retIndex)))
	}
	assert(RemoveBrackets(json.routes.tenant.key).equals(tempListTenantsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.tenant.name).equals(tempListTenantsName.get(retIndex)))
	assert(RemoveBrackets(json.routes.application.key).equals(tempListAppsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.version).equals(tempListDeploysVersion.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.key).equals(tempListDeploysKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.enabled as String).equals(tempListRoutesEnabled.get(retIndex) as String))
	log.info "Done with applications filter"
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// 								deployment key filter
// //////////////////////////////////////////////////////////////////////////////////////////////////

if(FindFirstSingleItem(tempListDeploysKey) > initialTotalCount)
{
	log.info "NOTE!!!!!!! --- not testing 'deployment key filter' "
	log.info tempListDeploysKey
}
else
{
	retIndex = FindFirstSingleItem(tempListDeploysKey)
		
	ClearAllFilters()	

	log.info "Starting deployments filter ------------ " 
	
	// setup tenant filter, make request, and get response.
	testRunner.testCase.setPropertyValue("DeploymentKey", tempListDeploysKey.get(retIndex)) 
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// Thread.sleep(500)

	log.info "Index: " + retIndex
	log.info "Filter Item: " + json.routes.deployment.key

	assert(RemoveBrackets(json.routes.key).equals(tempListRouteskey.get(retIndex)))
	if(!json.routes.qualifier.equals([null]))
	{
		assert(RemoveBrackets(json.routes.qualifier).equals(tempListRoutesQualifier.get(retIndex)))
	}
	assert(RemoveBrackets(json.routes.tenant.key).equals(tempListTenantsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.tenant.name).equals(tempListTenantsName.get(retIndex)))
	assert(RemoveBrackets(json.routes.application.key).equals(tempListAppsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.version).equals(tempListDeploysVersion.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.key).equals(tempListDeploysKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.enabled as String).equals(tempListRoutesEnabled.get(retIndex) as String))
	log.info "Done with deployments filter"
}


// //////////////////////////////////////////////////////////////////////////////////////////////////
// 								qualifier filter
// //////////////////////////////////////////////////////////////////////////////////////////////////

if(FindFirstSingleItem(tempListRoutesQualifier) > initialTotalCount)
{
	log.info "NOTE!!!!!!! --- not testing 'qualifier filter' "
	log.info tempListRoutesQualifier
}
else
{
	retIndex = FindFirstSingleItem(tempListRoutesQualifier)

	ClearAllFilters()	

	log.info "Starting qualifier filter ------------ " 
	
	// setup tenant filter, make request, and get response.
	testRunner.testCase.setPropertyValue("Qualifier", tempListRoutesQualifier.get(retIndex)) 
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// Thread.sleep(500)

	log.info "Index: " + retIndex
	log.info "Filter Item: " + json.routes.qualifier

	assert(RemoveBrackets(json.routes.key).equals(tempListRouteskey.get(retIndex)))
	assert(RemoveBrackets(json.routes.qualifier).equals(tempListRoutesQualifier.get(retIndex)))
	assert(RemoveBrackets(json.routes.tenant.key).equals(tempListTenantsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.tenant.name).equals(tempListTenantsName.get(retIndex)))
	assert(RemoveBrackets(json.routes.application.key).equals(tempListAppsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.version).equals(tempListDeploysVersion.get(retIndex)))

	assert(RemoveBrackets(json.routes.enabled as String).equals(tempListRoutesEnabled.get(retIndex) as String))
	log.info "Done with qualifier filter"
}


// //////////////////////////////////////////////////////////////////////////////////////////////////
// 								version filter
// //////////////////////////////////////////////////////////////////////////////////////////////////

if(FindFirstSingleItem(tempListDeploysVersion) > initialTotalCount)
{
	log.info "NOTE!!!!!!! --- not testing 'version filter' "
	log.info tempListDeploysVersion
}
else
{
	retIndex = FindFirstSingleItem(tempListDeploysVersion)

	ClearAllFilters()	

	log.info "Starting version filter ------------ " 
	
	// setup tenant filter, make request, and get response.
	testRunner.testCase.setPropertyValue("Version", tempListDeploysVersion.get(retIndex)) 
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// Thread.sleep(500)

	log.info "Index: " + retIndex
	log.info "Filter Item: " + json.routes.deployment.version

	assert(RemoveBrackets(json.routes.key).equals(tempListRouteskey.get(retIndex)))
	if(!json.routes.qualifier.equals([null]))
	{
		assert(RemoveBrackets(json.routes.qualifier).equals(tempListRoutesQualifier.get(retIndex)))
	}	
	assert(RemoveBrackets(json.routes.tenant.key).equals(tempListTenantsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.tenant.name).equals(tempListTenantsName.get(retIndex)))
	assert(RemoveBrackets(json.routes.application.key).equals(tempListAppsKey.get(retIndex)))
	assert(RemoveBrackets(json.routes.deployment.version).equals(tempListDeploysVersion.get(retIndex)))
	assert(RemoveBrackets(json.routes.enabled as String).equals(tempListRoutesEnabled.get(retIndex) as String))
	log.info "Done with version filter"
}









// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 												HELPERS
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

// receive a list (itemList). make a copy of the list (localList). find the first item in the 
// copy of the list that has only one item of itself. if an item isn't found, return the size of
// the itemList + 5.
int FindFirstSingleItem(def itemList)
{
	int x = 0
	def localList = []

	localList.addAll(itemList)

	boolean found = false

	for(x = 0; x &lt; itemList.size; x++)
	{
		if(localList.count(itemList.get(x)) == 1 &amp;&amp; itemList.get(x)!= null)
		{
			found = true
			break
		}
	}

	if(found)
	{
		return x		
	}
	else
	{
		return itemList.size + 5;
	}
}

void ClearAllFilters()
{
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")	
}

void VerifyTestCanBeDone(int returnedSize, int maxSize, String name)
{
	if(returnedSize > maxSize)
	{
		throw new Exception("Error in query for number of items called " + name + ".")
	}
}

String RemoveBrackets(String data)
{
	return data.replace("[","").replace("]","")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="MultipleItemFilterTests" id="c85db368-2c96-42dc-925d-b6ec2b86f104"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

ClearAllFilters()

RunGet("GetRoutes")
GetResponse("GetRoutes")

// with all items showing in the response, store all the routes keys and all the enabled values into a list
tempListRouteskey = json.routes.key
tempListRoutesEnabled = json.routes.enabled
tempListRoutesQualifier = json.routes.qualifier
tempListTenantsKey = json.routes.tenant.key 
tempListTenantsName = json.routes.tenant.name 
tempListAppsKey = json.routes.application.key 
tempListDeploysKey = json.routes.deployment.key 
tempListDeploysVersion = json.routes.deployment.version

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 											Verify Enabled
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
trueIndexList = []
falseIndexList = []


int initialTotalCount = json.metadata.totalCount // store the total number of items in the collection 
int maxNumItemsToUseInFilter = initialTotalCount - 2
int retIndex = 0; // this stroes an index returned from 'FindFirstSingleItem'.

// put create a list holding the index of the enabled = true and a create a list holding the index of the enabled = false
for(int x = 0; x < tempListRoutesEnabled.size(); x++)
{
	if(tempListRoutesEnabled.get(x) == true)
	{
		trueIndexList.add(x)
	}
	else
	{
		falseIndexList.add(x)
	}
}

// set enabled property to true and run the routes request.
testRunner.testCase.setPropertyValue("Enabled", "true")  
RunGet("GetRoutes")
GetResponse("GetRoutes")

int y = 0

// go through the indexes of the routes that have enabled set true and verify the corresponding route key.
for(int x : trueIndexList)
{
	//log.info tempListRouteskey.get(x)
	//log.info json.routes[y].key
	assert(tempListRouteskey.get(x) == json.routes[y].key)
	assert(json.routes[y].enabled == true)
	y++
}


// set enabled property to false and run the routes request.
testRunner.testCase.setPropertyValue("Enabled", "false")  
RunGet("GetRoutes")
GetResponse("GetRoutes")

y = 0

// go through the indexes of the routes that have enabled set true and verify the corresponding route key.
for(int x : falseIndexList)
{
	//log.info tempListRouteskey.get(x)
	//log.info json.routes[x].key
	assert(tempListRouteskey.get(x) == json.routes[y].key)
	assert(json.routes[y].enabled == false)
	y++
}

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//										tenant key filter multiple items
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
listIndexesOfItems = []
int numExpectedItemsInResponse = 0
int indexTracker = 0

// find if there are any tenant keys of quantity between 2 and maxNumItemsToUseInFilter
if(FindMultipleItems(tempListTenantsKey, maxNumItemsToUseInFilter) < initialTotalCount)
{
	log.info "Starting testing Tenant key filter for more than one tenant. ------------------- "
	
	// use the same method in if statement above to find the index of the first occurence of tenant key in tenant key list
	retIndex = FindMultipleItems(tempListTenantsKey, maxNumItemsToUseInFilter)

	// show the name of tenant key that has between 2 and maxNumItemsToUseInFilter occurences.
	log.info "tenant key name being filtered is " + tempListTenantsKey.get(retIndex)

	// go through the tenant keys list and store the indexes of each tenat key that matches tenant key name tempListTenantsKey.get(retIndex)
	// also keep track of the number of indexes stored.
	for(String str : tempListTenantsKey)
	{
		if(str.equals(tempListTenantsKey.get(retIndex)))
		{
			numExpectedItemsInResponse++
			listIndexesOfItems.add(indexTracker) // store the index of the tenant key.
		}
		indexTracker++
	}

	log.info "Number of expected items for filter of tenant key name " + tempListTenantsKey.get(retIndex) + " = " + numExpectedItemsInResponse

	// setup filter 
	ClearAllFilters()
	testRunner.testCase.setPropertyValue("TenantKey", tempListTenantsKey.get(retIndex))	

	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// verify the tenant key names and some other items that are expected in the filtered response.
	for(int x; x < numExpectedItemsInResponse; x++)
	{
		assert(json.routes[x].key.equals(tempListRouteskey.get(listIndexesOfItems[x])))
		assert(json.routes[x].tenant.key.equals(tempListTenantsKey.get(retIndex))) // use constant value for tenant
		assert(json.routes[x].application.key.equals(tempListAppsKey.get(listIndexesOfItems[x])))
		assert(json.routes[x].deployment.key.equals(tempListDeploysKey.get(listIndexesOfItems[x])))
	}

	log.info "Tenant key filter test for more than one tenant is complete."	
}
else
{
	log.info "NOTE!!!!!! - could not find a quantity of tenant keys between 2 and " +  maxNumItemsToUseInFilter
}

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//										application key filter multiple items
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
listIndexesOfItems.clear()
numExpectedItemsInResponse = 0
indexTracker = 0

// find if there are any application keys of quantity between 2 and maxNumItemsToUseInFilter
if(FindMultipleItems(tempListAppsKey, maxNumItemsToUseInFilter) < initialTotalCount)
{
	log.info "Starting testing Application key filter for more than one app. ------------------- "
	
	// use the same method in if statement above to find the index of the first occurence of application key in application key list
	retIndex = FindMultipleItems(tempListAppsKey, maxNumItemsToUseInFilter)

	// show the name of application key that has between 2 and maxNumItemsToUseInFilter occurences.
	log.info "application key name being filtered is " + tempListAppsKey.get(retIndex)

	// go through the application keys list and store the indexes of each application key that matches application key name tempListAppsKey.get(retIndex)
	// also keep track of the number of indexes stored.
	for(String str : tempListAppsKey)
	{
		if(str.equals(tempListAppsKey.get(retIndex)))
		{
			numExpectedItemsInResponse++
			listIndexesOfItems.add(indexTracker) // store the index of the application key.
		}
		indexTracker++
	}

	log.info "Number of expected items for filter of application key name " + tempListAppsKey.get(retIndex) + " = " + numExpectedItemsInResponse

	// setup filter 
	ClearAllFilters()
	testRunner.testCase.setPropertyValue("ApplicationKey", tempListAppsKey.get(retIndex))	

	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// verify the application key names and some other items that are expected in the filtered response.
	for(int x; x < numExpectedItemsInResponse; x++)
	{
		assert(json.routes[x].key.equals(tempListRouteskey.get(listIndexesOfItems[x])))
		assert(json.routes[x].tenant.key.equals(tempListTenantsKey.get(listIndexesOfItems[x])))
		assert(json.routes[x].application.key.equals(tempListAppsKey.get(retIndex))) // use constant value for application
		assert(json.routes[x].deployment.key.equals(tempListDeploysKey.get(listIndexesOfItems[x])))
	}

	log.info "Application key filter test for more than one app is complete."	

}
else
{
	log.info "NOTE!!!!!! - could not find a quantity of application keys between 2 and " +  maxNumItemsToUseInFilter
}

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//										deployment key filter multiple items
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
listIndexesOfItems.clear()
numExpectedItemsInResponse = 0
indexTracker = 0

// find if there are any deployment keys of quantity between 2 and maxNumItemsToUseInFilter
if(FindMultipleItems(tempListDeploysKey , maxNumItemsToUseInFilter) < initialTotalCount)
{
	log.info "Starting testing Deployment key filter for more than one deployment. ------------------- "
	
	// use the same method in if statement above to find the index of the first occurence of deployment key in deploymentnt key list
	retIndex = FindMultipleItems(tempListDeploysKey, maxNumItemsToUseInFilter)

	// show the name of deployment key that has between 2 and maxNumItemsToUseInFilter occurences.
	log.info "Deployment key name being filtered is " + tempListDeploysKey.get(retIndex)

	// go through the deployment keys list and store the indexes of each deployment key that matches deployment key name tempListDeploysKey.get(retIndex)
	// also keep track of the number of indexes stored.
	for(String str : tempListDeploysKey)
	{
		if(str.equals(tempListDeploysKey.get(retIndex)))
		{
			numExpectedItemsInResponse++
			listIndexesOfItems.add(indexTracker) // store the index of the tenant key.
		}
		indexTracker++
	}

	log.info "Number of expected items for filter of deployment key name " + tempListDeploysKey.get(retIndex) + " = " + numExpectedItemsInResponse

	// setup filter 
	ClearAllFilters()
	testRunner.testCase.setPropertyValue("DeploymentKey", tempListDeploysKey.get(retIndex))	

	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// verify the deployment key names and some other items that are expected in the filtered response.
	for(int x; x < numExpectedItemsInResponse; x++)
	{
		assert(json.routes[x].key.equals(tempListRouteskey.get(listIndexesOfItems[x])))
		assert(json.routes[x].tenant.key.equals(tempListTenantsKey.get(listIndexesOfItems[x])))
		assert(json.routes[x].application.key.equals(tempListAppsKey.get(listIndexesOfItems[x]))) 
		assert(json.routes[x].deployment.key.equals(tempListDeploysKey.get(retIndex))) // use constant value for deployment
	}

	log.info "Deployment key filter test for more than one deployment is complete."	
}
else
{
	log.info "NOTE!!!!!! - could not find a quantity of deployment keys between 2 and " +  maxNumItemsToUseInFilter
}

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//										qualifier key filter multiple items
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
listIndexesOfItems.clear()
numExpectedItemsInResponse = 0
indexTracker = 0

// find if there are any qualifier keys of quantity between 2 and maxNumItemsToUseInFilter
if(FindMultipleItems(tempListRoutesQualifier , maxNumItemsToUseInFilter) < initialTotalCount)
{
	log.info "Starting testing Qualifier filter for more than one qualifier. ------------------- "
	
	// use the same method in if statement above to find the index of the first occurence of qualifier in qualifier list
	retIndex = FindMultipleItems(tempListRoutesQualifier, maxNumItemsToUseInFilter)

	// show the name of qualifier that has between 2 and maxNumItemsToUseInFilter occurences.
	log.info "Qualifier name being filtered is " + tempListRoutesQualifier.get(retIndex)

	// go through the qualifier list and store the indexes of each qualifier that matches qualifier name tempListDeploysKey.get(retIndex)
	// also keep track of the number of indexes stored.
	for(String str : tempListRoutesQualifier)
	{
		if(str.equals(tempListRoutesQualifier.get(retIndex)))
		{
			numExpectedItemsInResponse++
			listIndexesOfItems.add(indexTracker) // store the index of the qualifier.
		}
		indexTracker++
	}

	log.info "Number of expected items for filter of qualifier name " + tempListRoutesQualifier.get(retIndex) + " = " + numExpectedItemsInResponse

	// setup filter 
	ClearAllFilters()
	testRunner.testCase.setPropertyValue("Qualifier", tempListRoutesQualifier.get(retIndex))	

	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// verify the qualifier names and some other items that are expected in the filtered response.
	for(int x; x < numExpectedItemsInResponse; x++)
	{
		assert(json.routes[x].key.equals(tempListRouteskey.get(listIndexesOfItems[x])))
		assert(json.routes[x].qualifier.equals(tempListRoutesQualifier.get(retIndex)))  // use constant value for qualifier
		assert(json.routes[x].tenant.key.equals(tempListTenantsKey.get(listIndexesOfItems[x])))
		assert(json.routes[x].application.key.equals(tempListAppsKey.get(listIndexesOfItems[x]))) 
		assert(json.routes[x].deployment.key.equals(tempListDeploysKey.get(listIndexesOfItems[x]))) 
	}

	log.info "Qualifier filter test for more than one qualifier is complete."	
}
else
{
	log.info "NOTE!!!!!! - could not find a quantity of qualifier items between 2 and " +  maxNumItemsToUseInFilter
}

// bladd
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//										version key filter multiple items
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
listIndexesOfItems.clear()
numExpectedItemsInResponse = 0
indexTracker = 0

// find if there are any qualifier keys of quantity between 2 and maxNumItemsToUseInFilter
if(FindMultipleItems(tempListDeploysVersion , maxNumItemsToUseInFilter) < initialTotalCount)
{
	log.info "Starting testing Version filter for more than one qualifier. ------------------- "
	
	// use the same method in if statement above to find the index of the first occurence of qualifier in qualifier list
	retIndex = FindMultipleItems(tempListDeploysVersion, maxNumItemsToUseInFilter)

	// show the name of qualifier that has between 2 and maxNumItemsToUseInFilter occurences.
	log.info "Version name being filtered is " + tempListDeploysVersion.get(retIndex)

	// go through the qualifier list and store the indexes of each qualifier that matches qualifier name tempListDeploysKey.get(retIndex)
	// also keep track of the number of indexes stored.
	for(String str : tempListDeploysVersion)
	{
		if(str.equals(tempListDeploysVersion.get(retIndex)))
		{
			numExpectedItemsInResponse++
			listIndexesOfItems.add(indexTracker) // store the index of the qualifier.
		}
		indexTracker++
	}

	log.info "Number of expected items for filter of Version name " + tempListDeploysVersion.get(retIndex) + " = " + numExpectedItemsInResponse

	// setup filter 
	ClearAllFilters()
	testRunner.testCase.setPropertyValue("Version", tempListDeploysVersion.get(retIndex))	

	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// verify the qualifier names and some other items that are expected in the filtered response.
	for(int x; x < numExpectedItemsInResponse; x++)
	{
		//assert(json.routes[x].key.equals(tempListRouteskey.get(listIndexesOfItems[x])))
		//assert(json.routes[x].qualifier.equals(tempListRoutesQualifier.get(retIndex)))  // use constant value for qualifier
		//assert(json.routes[x].tenant.key.equals(tempListTenantsKey.get(listIndexesOfItems[x])))
		//assert(json.routes[x].application.key.equals(tempListAppsKey.get(listIndexesOfItems[x]))) 
		//assert(json.routes[x].deployment.key.equals(tempListDeploysKey.get(listIndexesOfItems[x]))) 
	}

	log.info "Version filter test for more than one version is complete."	
}
else
{
	log.info "NOTE!!!!!! - could not find a quantity of Version items between 2 and " +  maxNumItemsToUseInFilter
}


// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

// receive a list (itemList). make a copy of the list (localList). find the first item in the 
// copy of the list that has a number of items between 2 and maxNumItems. if an item isn't found, 
// return the size of
// the itemList + 5.
int FindMultipleItems(def itemList, maxNumItems)
{
	int x = 0
	def localList = []

	localList.addAll(itemList)

	boolean found = false

	for(x = 0; x < itemList.size; x++)
	{
		if(itemList.get(x)!= null)
		{
			if(localList.count(itemList.get(x)) >= 2 && localList.count(itemList.get(x)) < maxNumItems )
			{
				found = true
				break
			}
		}
	}

	if(found)
	{
		return x		
	}
	else
	{
		return itemList.size + 5;
	}
}

// receive a list (itemList). make a copy of the list (localList). find the first item in the 
// copy of the list that has only one item of itself. if an item isn't found, return the size of
// the itemList + 5.
int FindFirstSingleItem(def itemList)
{
	int x = 0
	def localList = []

	localList.addAll(itemList)

	boolean found = false

	for(x = 0; x < itemList.size; x++)
	{
		if(localList.count(itemList.get(x)) == 1 && itemList.get(x)!= null)
		{
			found = true
			break
		}
	}

	if(found)
	{
		return x		
	}
	else
	{
		return itemList.size + 5;
	}
}

void ClearAllFilters()
{
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")
}

void VerifyTestCanBeDone(int returnedSize, int maxSize, String name)
{
	if(returnedSize > maxSize)
	{
		throw new Exception("Error in query for number of items called " + name + ".")
	}
}

String RemoveBrackets(String data)
{
	return data.replace("[","").replace("]","")
}


]]></script></con:config></con:testStep><con:testStep type="groovy" name="Paging" id="833ce286-a79b-49bf-a0d9-a63f0df0f51c"><con:settings/><con:config><script>import groovy.json.JsonSlurper


int numberOfNeededRoutes = 9

ClearAllFiltersPaging()

testRunner.testCase.setPropertyValue("PageSize","100")

RunGet("GetRoutes")
GetResponse("GetRoutes")

listOfAllKeys = json.routes.key
int totalCollectionCount = json.metadata.totalCount

log.info "Total count of routes = " + totalCollectionCount
log.info ""

if(totalCollectionCount &lt; numberOfNeededRoutes) 
{
	throw new Exception("Please add enough routes to make the collection size = " + numberOfNeededRoutes + ".")
}

assert(json.routes.key.size() == json.metadata.totalCount)

// *************************************************************
//				Page Size = 2
// *************************************************************
int totalCount = json.metadata.totalCount
int page = 1
int pageSize = 2

ShowPageSizeMessage(pageSize)

testRunner.testCase.setPropertyValue("Page", page as String) // page = 1
testRunner.testCase.setPropertyValue("PageSize", pageSize as String) 

// run request with current filter settings
RunGet("GetRoutes")
GetResponse("GetRoutes")

int numFullPages = totalCollectionCount/pageSize
int numItemsInAllFullPages = numFullPages * pageSize
int numItemsInPartialPage = totalCollectionCount % pageSize

//log.info numFullPages
//log.info numItemsInAllFullPages
//log.info numItemsInPartialPage

if((numItemsInAllFullPages + numItemsInPartialPage) != json.metadata.totalCount)
{
		throw new Exception("The number of calculated page items doesn't equal the 'totalCount' in jsaon response. Err ID = 'BBBB'")
}

log.info numItemsInAllFullPages + "|" + pageSize + "|" + numItemsInPartialPage + "|" + page

RunPagingTest(numItemsInAllFullPages, pageSize, numItemsInPartialPage, page)

// *************************************************************
//				Page Size = 3
// *************************************************************
page = 1
pageSize = 3
ShowPageSizeMessage(pageSize)

testRunner.testCase.setPropertyValue("Page", page as String) // page = 1
testRunner.testCase.setPropertyValue("PageSize", pageSize as String) // pageSize = 2

// run request with current filter settings
RunGet("GetRoutes")
GetResponse("GetRoutes")

numFullPages = totalCollectionCount/pageSize
numItemsInAllFullPages = numFullPages * pageSize
numItemsInPartialPage = totalCollectionCount % pageSize

//log.info numFullPages
//log.info numItemsInAllFullPages
//log.info numItemsInPartialPage

if((numItemsInAllFullPages + numItemsInPartialPage) != json.metadata.totalCount)
{
		throw new Exception("The number of calculated page items doesn't equal the 'totalCount' in jsaon response. Err ID = 'CCCC'")
}
RunPagingTest(numItemsInAllFullPages, pageSize, numItemsInPartialPage, page)

// *************************************************************
//				Page Size = 4
// *************************************************************
page = 1
pageSize = 4
ShowPageSizeMessage(pageSize)

testRunner.testCase.setPropertyValue("Page", page as String) // page = 1
testRunner.testCase.setPropertyValue("PageSize", pageSize as String) // pageSize = 2

// run request with current filter settings
RunGet("GetRoutes")
GetResponse("GetRoutes")

numFullPages = totalCollectionCount/pageSize
numItemsInAllFullPages = numFullPages * pageSize
numItemsInPartialPage = totalCollectionCount % pageSize

//log.info numFullPages
//log.info numItemsInAllFullPages
//log.info numItemsInPartialPage

if((numItemsInAllFullPages + numItemsInPartialPage) != json.metadata.totalCount)
{
		throw new Exception("The number of calculated page items doesn't equal the 'totalCount' in jsaon response. Err ID = 'DDDD'")
}

RunPagingTest(numItemsInAllFullPages, pageSize, numItemsInPartialPage, page)

// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

void ClearAllFiltersPaging()
{
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")
	testRunner.testCase.setPropertyValue("PageSize", "")
	testRunner.testCase.setPropertyValue("Page", "")
}

void ShowPageSizeMessage(int pageSize)
{
	log.info "************************"
	log.info  "Page size = " + pageSize
	log.info "************************"
}

// this runs the page testing. a call to page one has already been done bedore this is called.
void RunPagingTest(int numItemsInAllFullPages, int pageSize, int numItemsInPartialPage, int page)
{
	int x = 0
	int y = 0
	int z = 0
	
	for(x = 0 ; x &lt; numItemsInAllFullPages; x+= pageSize) // x goes from one page to the next for each full page
	{
		log.info "----- Test one full page ------."
		
		z = 0
		// x is at the top of a page. 
		// y goes through the indexing of the list of all keys that was created at top of the script.
		// z is for getting the items on the current page using zero based.
		for(y = x; y &lt; x + pageSize; y ++) 
		{
			log.info listOfAllKeys.get(y)	+ ":" + 	json.routes[z].key
			if(!listOfAllKeys.get(y).equals(json.routes[z].key))
			{
				throw new Exception("Expected value " + listOfAllKeys.get(y) + " is not equal to actual value in Json response "  +  json.routes[z].key + " Method name 'RunPagingTest'. Err ID = 'EEEE'")
			}
			z++
		}
	
		page++ // move to next full page.
	
		// run request with current page number
		testRunner.testCase.setPropertyValue("Page", page as String) 
		RunGet("GetRoutes")
		GetResponse("GetRoutes")
	}
	
	if(numItemsInPartialPage == 0)
	{
		log.info "- There are no items in partial page. '"
	}
	else
	{
		log.info "- There are items in partial page. -"
	
		// at this point the call to applications with page parameter set to the last page was done above. this will verify the contents.
		y = 0
		for( ;x &lt; listOfAllKeys.size(); x++)
		{
			// log.info x
			log.info listOfAllKeys.get(x) + ":" + json.routes[y].key
			if(!listOfAllKeys.get(x).equals(json.routes[y].key))
			{
				throw new Exception("Failed verification on the last page. Expected is " + listOfAllKeys.get(x) + " and actual is " + json.applications[y].key + ". Method name 'RunPagingTest'. Err ID = 'FFFF'")
			}
			y++
		}
		
		if(y != numItemsInPartialPage)
		{
			throw new Exception("Expected number of items on partial page " + numItemsInPartialPage + " Doesn't match the counted number " + y + " of items on the partial page.  Method name 'RunPagingTest'. Err ID = 'GGGG'")
		}

	}
	
	log.info ""
}
</script></con:config></con:testStep><con:testStep type="groovy" name="VerifySendingBadInfoForAllParameters" id="701a3c10-8a7e-4d19-b985-786ea9ff0684"><con:settings/><con:config><script>import groovy.json.JsonSlurper

String badData =  "ThisIsBadData888"

// clear all filter fields
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("ApplicationKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("Enabled", "")
testRunner.testCase.setPropertyValue("Page", "")

// make these true
testRunner.testCase.setPropertyValue("includeTenant", "true")
testRunner.testCase.setPropertyValue("includeApplication", "true")
testRunner.testCase.setPropertyValue("includeDeployment", "true")

testRunner.testCase.setPropertyValue("PageSize", "200") // allow all items.

// setup bad input on app key
testRunner.testCase.setPropertyValue("ApplicationKey", badData)
RunGet("GetRoutes")
GetResponse("GetRoutes")
VerifyExpectedresponse()

// clear app key and use Tenant key
testRunner.testCase.setPropertyValue("ApplicationKey", "")
testRunner.testCase.setPropertyValue("TenantKey", badData)
RunGet("GetRoutes")
GetResponse("GetRoutes")
VerifyExpectedresponse()

// clear tenant key and use deploy key
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", badData)
RunGet("GetRoutes")
GetResponse("GetRoutes")
VerifyExpectedresponse()

// clear deploy key and use qualifier
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", badData)
RunGet("GetRoutes")
GetResponse("GetRoutes")
VerifyExpectedresponse()

// clear qualifier key and use version
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("Version", badData)
RunGet("GetRoutes")
GetResponse("GetRoutes")
VerifyExpectedresponse()


	
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 												HELPERS
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// this is the expected reponse for each request made with bad data in a filter.
void VerifyExpectedresponse()
{
	assert(json.routes.equals([]))
	assert(json.metadata.totalCount.equals(0))
	assert(json.metadata.totalPages.equals(0))
	assert(json.metadata.pageSize.equals(testRunner.testCase.getPropertyValue("PageSize") as int))
	log.info "Done verifying response for bad data."
}

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:testStep type="groovy" name="VerifyPageMetaDataAndParamsOutOfBounds" id="c8833ae8-b1f4-4163-b2a4-a4edce98157b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

String badData =  "ThisIsBadData888"

// clear all filter fields
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("ApplicationKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("Enabled", "")
testRunner.testCase.setPropertyValue("Page", "")

// make these true
testRunner.testCase.setPropertyValue("includeTenant", "true")
testRunner.testCase.setPropertyValue("includeApplication", "true")
testRunner.testCase.setPropertyValue("includeDeployment", "true")

testRunner.testCase.setPropertyValue("PageSize", "300") // allow all items.


RunGet("GetRoutes")
GetResponse("GetRoutes")

log.info json.routes.size()

// store number of routes and verify metadata totalCount = number of routes.
int nunberOfRouteKeys =  json.routes.size()
assert(json.metadata.totalCount.equals(nunberOfRouteKeys))

// set page to way past first page and verify there is no json response.
String pageNotFound = "10"
testRunner.testCase.setPropertyValue("Page", pageNotFound) // go past the only page

RunGet("GetRoutes")
GetResponse("GetRoutes")

assert(json.routes.equals([])) // verify no json response
assert(json.metadata.page.equals(pageNotFound as int)) // verify page set correctly


//testRunner.testCase.setPropertyValue("Page", "20") // go past the only page

// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 												HELPERS
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// this is the expected reponse for each request made with bad data in a filter.
void VerifyExpectedresponsePage()
{
	assert(json.routes.equals([]))
	assert(json.metadata.totalCount.equals(0))
	assert(json.metadata.totalPages.equals(0))
	// assert(json.metadata.pageSize.equals(testRunner.testCase.getPropertyValue("PageSize") as int))
	log.info "Done verifying response for bad data."
}

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:properties><con:property><con:name>includeTenant</con:name><con:value>true</con:value></con:property><con:property><con:name>includeApplication</con:name><con:value>true</con:value></con:property><con:property><con:name>includeDeployment</con:name><con:value>true</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value/></con:property><con:property><con:name>ApplicationKey</con:name><con:value/></con:property><con:property><con:name>DeploymentKey</con:name><con:value/></con:property><con:property><con:name>Qualifier</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>Enabled</con:name><con:value/></con:property><con:property><con:name>AppllicationKey</con:name><con:value>RVM</con:value></con:property><con:property><con:name>PageSize</con:name><con:value>300</con:value></con:property><con:property><con:name>Page</con:name><con:value/></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxOTkyOTA0OX0.rWZgFd9vVDn9aMFZu2S9ZLlQwJAH9TI0Ywx4_EKxw_jR1FJbhPqCqQyS1bj7sKEJNKOTrn-dNwmrycK2CxYfMw</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>51d5937f-6e21-49b6-af71-482eea7de70b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c85db368-2c96-42dc-925d-b6ec2b86f104</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>833ce286-a79b-49bf-a0d9-a63f0df0f51c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>701a3c10-8a7e-4d19-b985-786ea9ff0684</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="61072b3e-81ec-4f0a-9731-e8e3f8b6bc4f" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="GetRouteByKeyDetail_AUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="1f9c6a77-8e21-4dd0-a5fc-8372e52d996d"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetupTestCasePropertiesForAllTests" id="f44d23e4-f07c-4e73-95d6-531cba5240f4"><con:settings/><con:config><script>import groovy.json.JsonSlurper

String state = "true" // this is for setting include apps include tenant, and include deployment fields.
testRunner.testCase.setPropertyValue("IncludeApplication", "true")
testRunner.testCase.setPropertyValue("IncludeTenant", "true")
testRunner.testCase.setPropertyValue("IncludeDeployment", "true")

testRunner.testCase.setPropertyValue("RouteKey", "")

// /////////////////////////////////////////////////////////////////////////////
// first make request and find a route key name to use for testsing.
// /////////////////////////////////////////////////////////////////////////////
RunGet("GetRoutes")
GetResponse("GetRoutes")

// /////////////////////////////////////////////////////////////////////////////
// find the first route that has a qualifier and store all of its properties.
// /////////////////////////////////////////////////////////////////////////////

// bladd
/*
listOfQualifiers = json.routes.deployment.description
log.info  json.routes.deployment.description

int z = 0

for(String str : listOfQualifiers) 
{
	if(str != null)
	{
		break
	}
	z++
}

log.info "Index of Route to be used for testing is " + z
return
*/


listOfQualifiers = json.routes.qualifier
int x = 0

for(String str : listOfQualifiers) 
{
	if(str != null)
	{
		break
	}
	x++
}

log.info "Index of Route to be used for testing is " + x

// set needed test casse properties to the route index 'x'
SetTestCaseProperties(x)


// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

void SetTestCaseProperties(int x)
{

	// route key, qualifier, and enabled
	testRunner.testCase.setPropertyValue("RouteKey", json.routes[x].key)
	testRunner.testCase.setPropertyValue("RouteEnabled", json.routes[x].enabled as String)
	testRunner.testCase.setPropertyValue("RouteQualifier", json.routes[x].qualifier)
	
	// tenant
	testRunner.testCase.setPropertyValue("TenantKey", json.routes[x].tenant.key)
	testRunner.testCase.setPropertyValue("TenantName", json.routes[x].tenant.name)
	testRunner.testCase.setPropertyValue("TenantEnabled", json.routes[x].tenant.enabled as String)
	
	// application
	testRunner.testCase.setPropertyValue("ApplicationKey", json.routes[x].application.key)
	testRunner.testCase.setPropertyValue("ApplicationName", json.routes[x].application.name)
	testRunner.testCase.setPropertyValue("ApplicationDescription", json.routes[x].application.description)
	testRunner.testCase.setPropertyValue("ApplicationEnabled", json.routes[x].application.enabled as String)
	
	// deployment
	testRunner.testCase.setPropertyValue("DeployKey", json.routes[x].deployment.key)
	testRunner.testCase.setPropertyValue("DeployVersion", json.routes[x].deployment.version)
	testRunner.testCase.setPropertyValue("DeployDescription", json.routes[x].deployment.description)
	// testRunner.testCase.setPropertyValue("DeployClusterName", "don't need") // removed
	testRunner.testCase.setPropertyValue("DeployApplicationKey", json.routes[x].deployment.applicationKey)
	testRunner.testCase.setPropertyValue("DeployEnabled", json.routes[x].deployment.enabled as String)
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="4a8133c8-ea51-400d-86d7-0bbcae58d064"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1791389f-7dc8-4c2b-a294-6958bb544c0b" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="pageSize" value="100"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupAndMakeCallsToGetRoutesByKey" id="07d887fb-f677-443a-bd1f-ee0c3172da66"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// NOTE: GetRouteByKey had it's 'key' field '${#TestCase#RouteKey}' setup in the 'SetupTestCaseProperties' groovy step.

log.info "Start 'SetupAndMakeCallsToGetRoutesByKey' script"

// make sure these are set.
testRunner.testCase.setPropertyValue("IncludeApplication", "true")
testRunner.testCase.setPropertyValue("IncludeTenant", "true")
testRunner.testCase.setPropertyValue("IncludeDeployment", "true")
testRunner.testCase.setPropertyValue("RouteKey", testRunner.testCase.getPropertyValue("RouteKey"))


// call 'GetRouteByKey' with all includes set true.
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

VerifyRouteFields(Section.Tenant)
VerifyRouteFields(Section.Application)
VerifyRouteFields(Section.Deployment)

log.info "-------------------------------------"

// set include tenant false.
testRunner.testCase.setPropertyValue("IncludeTenant", "false")
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")


VerifyRouteFields(Section.Application)
VerifyRouteFields(Section.Deployment)

// main block gone. only key is shown
assert(json.tenant == null) 
assert(json.tenantKey.equals(testRunner.testCase.getPropertyValue("TenantKey")))


log.info "-------------------------------------"

// set include application false.
testRunner.testCase.setPropertyValue("IncludeApplication", "false")
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

VerifyRouteFields(Section.Deployment)

// main block gone. only key is shown
assert(json.tenant == null)
assert(json.tenantKey.equals(testRunner.testCase.getPropertyValue("TenantKey")))
assert(json.application == null)
assert(json.applicationKey.equals(testRunner.testCase.getPropertyValue("ApplicationKey")))

log.info "-------------------------------------"

// set include deployment false.
testRunner.testCase.setPropertyValue("IncludeDeployment", "false")
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

assert(json.tenant == null)
assert(json.tenantKey.equals(testRunner.testCase.getPropertyValue("TenantKey")))
assert(json.application == null)
assert(json.applicationKey.equals(testRunner.testCase.getPropertyValue("ApplicationKey")))
assert(json.deployment == null)
assert(json.deploymentKey.equals(testRunner.testCase.getPropertyValue("DeployKey")))

log.info "-------------------------------------"

// //////////////////////////////////////////////////////////////////////////////////////////
// 							Start adding sections back.
// //////////////////////////////////////////////////////////////////////////////////////////

// add back include deployment.
testRunner.testCase.setPropertyValue("IncludeDeployment", "true") 
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

VerifyRouteFields(Section.Deployment)
assert(json.tenant == null)
assert(json.tenantKey.equals(testRunner.testCase.getPropertyValue("TenantKey")))
assert(json.application == null)
assert(json.applicationKey.equals(testRunner.testCase.getPropertyValue("ApplicationKey")))

log.info "-------------------------------------"

// add back include tenant.
testRunner.testCase.setPropertyValue("IncludeDeployment", "true") 
testRunner.testCase.setPropertyValue("IncludeTenant", "true") 
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

VerifyRouteFields(Section.Deployment)
VerifyRouteFields(Section.Tenant)
assert(json.application == null)
assert(json.applicationKey.equals(testRunner.testCase.getPropertyValue("ApplicationKey")))

log.info "-------------------------------------"

// add back include application.
testRunner.testCase.setPropertyValue("IncludeDeployment", "true") 
testRunner.testCase.setPropertyValue("IncludeTenant", "true") 
testRunner.testCase.setPropertyValue("IncludeApplication", "true") 
RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

VerifyRouteFields(Section.Deployment)
VerifyRouteFields(Section.Tenant)
VerifyRouteFields(Section.Application)

// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////
// 										helpers
// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////

void VerifyRouteFields(Section section)
{
	// route 
	assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey")))
	assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("RouteQualifier")))
	assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled")))

	if(section.equals(Section.Tenant))
	{
		log.info "Verifying Tenant Section"		
		// tenant
		assert(json.tenant.key.equals(testRunner.testCase.getPropertyValue("TenantKey")))
		assert(json.tenant.name.equals(testRunner.testCase.getPropertyValue("TenantName")))
		assert((json.tenant.enabled  as String).equals(testRunner.testCase.getPropertyValue("TenantEnabled")))
	}

	if(section.equals(Section.Application))
	{
		log.info "Verifying Application Section"		
		// application
		assert(json.application.key.equals(testRunner.testCase.getPropertyValue("ApplicationKey")))
		assert(json.application.name.equals(testRunner.testCase.getPropertyValue("ApplicationName")))	
		assert(json.application.description.equals(testRunner.testCase.getPropertyValue("ApplicationDescription")))		
		assert((json.application.enabled as String).equals(testRunner.testCase.getPropertyValue("ApplicationEnabled")))			
	}

	if(section.equals(Section.Deployment))
	{
		log.info "Verifying Deployment Section"		
		// deployment
		assert(json.deployment.key.equals(testRunner.testCase.getPropertyValue("DeployKey")))
		assert(json.deployment.version.equals(testRunner.testCase.getPropertyValue("DeployVersion")))
		assert(json.deployment.description.equals(testRunner.testCase.getPropertyValue("DeployDescription")))
		assert(json.deployment.applicationKey.equals(testRunner.testCase.getPropertyValue("DeployApplicationKey")))
		assert((json.deployment.enabled as String).equals(testRunner.testCase.getPropertyValue("DeployEnabled")))	}
}

enum Section
{
	Tenant,
	Application,
	Deployment,
	Route
}


void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKey" id="9cc30262-9a63-4096-a3d7-ab4517e4eb44"><con:settings/><con:config service="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="GetByRouteKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKey" id="b58ab9e1-e967-438d-a1f8-85c99fac8a0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://http/v1/routes/%23TestCase%23RouteKey%7D</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7edc3af6-64aa-48c0-92df-d7769e58c036" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="${#TestCase#IncludeApplication}"/>
  <con:entry key="includeTenant" value="${#TestCase#IncludeTenant}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="${#TestCase#IncludeDeployment}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKeyWillFail" id="5f423d16-0e8a-4d65-83f3-41f4b1583c89"><con:settings/><con:config service="GetByRouteKey" methodName="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKeyWillFail" id="b0b772d8-35ab-45a7-a3db-d0838a652b7a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/ZXCBNVXCZVB</con:originalUri><con:assertion type="JsonPath Match" id="c8895f24-7fb0-45e6-bd4b-287f2cdfdcb7" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>404</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0593e465-d83d-4676-af17-6a0dc33c84ad" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efe88328-0600-4742-a3eb-b8fd8537cfe4" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Could not find route with key: ZXCBNVXCZVB</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="ZXCBNVXCZVB"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="FailBoolForIncludeTenant" id="4050dc47-5884-425f-bf45-3b1688c9f6b0"><con:settings/><con:config service="GetByRouteKey" methodName="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FailBoolForIncludeTenant" id="e8ca5b63-fc61-4c43-8561-fde01a87d573" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://http/v1/routes/APR-RVM</con:originalUri><con:assertion type="JsonPath Match" id="176b4c93-0fea-4598-ae0e-13a03252660f" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2dece7f-be6e-4a1a-9ec4-7f51ac774118" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>INVALID_BOOLEAN_PARAMETER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2047a1a-050a-4050-a6c9-732a29813b04" name="Match content of [message]"><con:configuration><path>$['message']</path><content>includeTenant parameter NotBool must be either true or false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="NotBool"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="FailBoolForIncludeApplication" id="48fe8230-4b6f-4ebb-8175-b8920a327ecb"><con:settings/><con:config service="GetByRouteKey" methodName="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FailBoolForIncludeApplication" id="76c4026a-3f91-4982-9390-064afc100106" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://http/v1/routes/APR-RVM</con:originalUri><con:assertion type="JsonPath Match" id="9968147e-c7cc-45c2-a259-fa3ae9d27ea2" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a55c1e63-d943-465c-bce6-347b0f736517" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>INVALID_BOOLEAN_PARAMETER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ae8958c-c022-4748-86d2-ea0240c3e1a5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>includeApplication parameter NotBool must be either true or false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="NotBool"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="FailBoolForIncludeDeployment" id="515de8cf-c2ec-4538-a6b8-5a1700f2fc47"><con:settings/><con:config service="GetByRouteKey" methodName="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FailBoolForIncludeDeployment" id="21d6c99e-c9eb-42c8-972f-60bd17dc948d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://http/v1/routes/</con:originalUri><con:assertion type="JsonPath Match" id="5f5ce7a6-8a46-479f-a9d3-2b9597cec991" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7540ea65-f372-4d0c-ba0d-467202ecffa1" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>INVALID_BOOLEAN_PARAMETER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1e83195-302a-4e21-a04e-1733f249b761" name="Match content of [message]"><con:configuration><path>$['message']</path><content>includeDeployment parameter NotBool must be either true or false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="NotBool"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>IncludeApplication</con:name><con:value>true</con:value></con:property><con:property><con:name>IncludeTenant</con:name><con:value>true</con:value></con:property><con:property><con:name>IncludeDeployment</con:name><con:value>true</con:value></con:property><con:property><con:name>RouteKey</con:name><con:value>APP_ANA_1:TNN_A:R_TEST_A</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>DEP_ANA_1</con:value></con:property><con:property><con:name>DeployVersion</con:name><con:value>4.0.0</con:value></con:property><con:property><con:name>DeployDescription</con:name><con:value>...Test....</con:value></con:property><con:property><con:name>DeployApplicationKey</con:name><con:value>APP_ANA_1</con:value></con:property><con:property><con:name>DeployEnabled</con:name><con:value>false</con:value></con:property><con:property><con:name>RouteEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>RouteQualifier</con:name><con:value>R_TEST_A</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>TNN_A</con:value></con:property><con:property><con:name>TenantName</con:name><con:value>Tenant A</con:value></con:property><con:property><con:name>TenantEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>APP_ANA_1</con:value></con:property><con:property><con:name>ApplicationName</con:name><con:value>Application Test 1</con:value></con:property><con:property><con:name>ApplicationDescription</con:name><con:value>Testing</con:value></con:property><con:property><con:name>ApplicationEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4a8133c8-ea51-400d-86d7-0bbcae58d064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="cadf3ccb-78af-4218-b083-469d94dd302d" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="PostRouteErrorChecks_AUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="aa8b7f7b-8cf5-45c5-b23c-bb852bbb3316"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetupForPostRouteTenantHasNoApp" id="c5f90459-ff8b-4281-890e-e29308006afe"><con:settings/><con:config><script>

// This causes fail for tenant having no associated app.

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "NoApp")
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO") // this exists 
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO") // this exists
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteTenantHasNoApp" id="a8a7818b-1d83-446b-abf4-33ba6ef401ed"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteTenantHasNoApp" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="e8cfc6b4-7c98-47fd-8926-7200e94456fb" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated tenant NOAPP does not have access to the associated application DEP_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96b30f03-716f-4265-b478-8596e082d732" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_DEPLOYMENT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f126bbb-b2d5-4ab7-97a1-7029f1aada14" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupForPostRouteAppAndDeployDontMatch" id="5651b59e-32dc-405d-a98d-df8afb61eea0"><con:settings/><con:config><script>

// this will cause fail for Deployment app and Deployment key don't match (deployment app is connected to the tenant)

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "bauto")
testRunner.testCase.setPropertyValue("ApplicationKey", "LonelyApp") // this exists 
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO") // this exists
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteAppAndDeployDontMatch" id="657d7699-2bba-4919-8a63-97d4487b4902"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteAppAndDeployDontMatch" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="3a4280c2-982a-4709-baf9-122176e9bd48" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because the application associated with the specified deployment:BOB_AUTO does not match the applicationKey: LONELYAPP specified in the route</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec01046a-374e-4c1d-be3f-690f689ade92" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_DEPLOYMENT_APP_MUST_MATCH_ROUTE_APP</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f290bc49-9d2f-4b05-8045-1395ac27d8bd" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupForTenantNotExist" id="dcc67821-8598-4eb5-8db3-17e310f51d05"><con:settings/><con:config><script>

// this will cause fail for tenant not existing

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "ZXCVB") // bad tenant
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO") 
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO") 
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteTenantNotExist" id="b988c68c-4da4-431a-83a6-a6e80f9655d0"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteTenantNotExist" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="5cb4c053-e427-4544-9e2a-ee6731089cd9" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_TENANT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="848ce322-3ec2-4fc0-875b-336365e4e091" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated tenant ZXCVB does not exist</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="678ba808-7d35-4e57-83ad-15c56b955619" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupForDeploymentNotExist" id="c6233ba2-ae29-4d1b-8842-45296ab2fdc7"><con:settings/><con:config><script>

// this will cause fail for tenant not existing

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "bauto") 
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO") 
testRunner.testCase.setPropertyValue("DeployKey", "ZXCVBNMZ") 
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteDeploymentNotExist" id="3c0b8b11-4f7d-447e-bdd7-83ea5d0eb769"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteDeploymentNotExist" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="b4bf17ff-8529-404f-ad80-ea56c823de11" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated deployment ZXCVBNMZ does not exist</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88841c82-9572-43f0-b7a6-8a782c7b7162" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cdf2f54d-be29-4fdd-b230-ceeddd17b84a" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_DEPLOYMENT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupForApplicationNotExist" id="ee55c3fd-b4dc-42db-b7f4-f3b64765d9ae"><con:settings/><con:config><script>

// this will cause fail for deployment not existing

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "bauto") 
testRunner.testCase.setPropertyValue("ApplicationKey", "ZXZXCVXZ") 
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO") 
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteApplicationNotExist" id="3e0eb615-4c22-4523-8cc8-789a6926d109"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteApplicationNotExist" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="ed110d04-db70-4670-b656-6fa3053a51c9" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_APPLICATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f665baeb-7175-4993-a627-b62e0d4ba031" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated application ZXZXCVXZ does not exist</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5229cd78-738b-4b0b-8fac-0ab835b331a0" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupForDeployNotAssociateToApp" id="d0bf23ab-9c47-4a00-bd16-7642a9703f26"><con:settings/><con:config><script>

// this will cause fail for 

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "bauto") 
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")  
testRunner.testCase.setPropertyValue("DeployKey", "BOBTWO") // not associated to 'der_auto'
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteDeployNotAssociateToApp" id="86035ccc-da21-4d62-a7ee-3ab6aef610db"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteDeployNotAssociateToApp" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="0a86438f-9758-4472-9057-efbb58b4ea77" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb16eb9a-6212-49a8-a779-720cc1aff1b9" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_DEPLOYMENT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a68fe926-9d86-494d-880b-911edcc7bd5f" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated tenant BAUTO does not have access to deployment BOBTWO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="fbd019df-6057-49a7-9c12-7bfd38936151"><con:settings/><con:config><script>// this will cause fail for tenant app is not app in deployment

testRunner.testCase.setPropertyValue("RouteKey", "MrubarbCanDelete")
testRunner.testCase.setPropertyValue("TenantKey", "bten2")  // tenant app doesn't match deployment app.
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO") 
testRunner.testCase.setPropertyValue("Qualifier", "qualy")</script></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteDeployAppNotMatchTenantApp" id="fc370f64-0907-4bd0-8041-22441e62f372"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteDeployAppNotMatchTenantApp" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#RouteKey}",
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="240ac9a5-c784-4cbc-beb8-2d9f90eac97c" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8f512b9-0420-4b1f-9227-4503f32163cc" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_DEPLOYMENT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f5949eb-2059-4e5c-87bf-c922f1f8850b" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated tenant BTEN2 does not have access to the associated application DEP_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>TenantKey</con:name><con:value>bten2</con:value></con:property><con:property><con:name>RouteKey</con:name><con:value>MrubarbCanDelete</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>BOB_AUTO</con:value></con:property><con:property><con:name>Qualifier</con:name><con:value>qualy</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5651b59e-32dc-405d-a98d-df8afb61eea0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6233ba2-ae29-4d1b-8842-45296ab2fdc7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fbd019df-6057-49a7-9c12-7bfd38936151</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="8c9fd7e8-c430-4b6b-918f-dac9698bff51" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="GetRoutesExternalChages_AUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="642e28eb-9dd2-4786-9e9f-64dd0e3c80f0"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Setup" id="e07e4e96-c496-409b-843d-db85bf617585"><con:settings/><con:config><script>
//DEP_AUTO:BAUTO:AUTOMATION
testRunner.testCase.setPropertyValue("RouteKey", "DEP_AUTO:BAUTO:AUTOMATION") // this type of key was added 12/7/17 
testRunner.testCase.setPropertyValue("RouteEnabled", "true")
testRunner.testCase.setPropertyValue("Qualifier", "AUTOMATION")

// tenant
testRunner.testCase.setPropertyValue("TenantKey", "BAUTO")
testRunner.testCase.setPropertyValue("TenantName", "for automation")
testRunner.testCase.setPropertyValue("TenantEnabled", "true")

// //////////////////////////////////////////////////
// these are changes that can be made to the tenat.
// //////////////////////////////////////////////////
testRunner.testCase.setPropertyValue("TenantNameChanged", "for automation changed")
testRunner.testCase.setPropertyValue("TenantEnabledChanged", "false")

// application
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("ApplicationName", "bobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationDescription", "descBobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationEnabled", "true")

// ////////////////////////////////////////////////////////
// these are changes that can be made to the application.
// ////////////////////////////////////////////////////////
testRunner.testCase.setPropertyValue("ApplicationNameChanged", "bobDeployTestChanged")
testRunner.testCase.setPropertyValue("ApplicationDescriptionChanged", "descBobDeployTestChanged")
testRunner.testCase.setPropertyValue("ApplicationEnabledChanged", "false")

// deployment
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO")
testRunner.testCase.setPropertyValue("DeployVersion", "good")
testRunner.testCase.setPropertyValue("DeployDescription", "good")
testRunner.testCase.setPropertyValue("DeployApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployEnabled", "false")

// ////////////////////////////////////////////////////////
// these are changes that can be made to the deployment.
// ////////////////////////////////////////////////////////
testRunner.testCase.setPropertyValue("DeployVersionChanged", "goodChanged")
testRunner.testCase.setPropertyValue("DeployDescriptionChanged", "goodChanged")
testRunner.testCase.setPropertyValue("DeployEnabledChanged", "true")


</script></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKey" id="1bd28d38-81b8-4fd9-9f06-7e036ce336c3"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKey" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRoute" id="4b4f07fd-76be-499a-ae0d-51b7af413d6e"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRoute" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a7899380-c56a-448f-98c3-0c18e81c421b" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PutTenantByKeyChangeProperties" id="71d7dfe1-4c60-45a7-9694-16ef93ce3d7d"><con:settings/><con:config service="PutTenantByKey" resourcePath="/platformservice/api/v1/tenants/{key}" methodName="PutTenantByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutTenantByKeyChangeProperties" id="4b0200e8-83ed-4f98-a973-8346e3ded06e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
   "key": "${#TestCase#TenantKey}",
   "name": "${#TestCase#TenantNameChanged}",
   "enabled": "${#TestCase#TenantEnabledChanged}"
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/tenant/BAUTO</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac8c3717-db9d-44ce-8e4b-a4c6bca27ea1" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#TenantKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRouteByKey" id="d7bb5599-7ffd-4860-91fa-b3d80ba28448"><con:settings/><con:config service="GetByRouteKey" methodName="GetByRouteKey" resourcePath="/platformservice/api/v1/routes/{key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRouteByKey" id="a1bdf64e-9f8f-4ec1-a2bb-48a309e4e9e0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="651628fe-cc5e-4c3f-950e-17caefd92c82" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyChangedTenant" id="ffa13f29-09ca-4f65-a0b2-1cd040f1402d"><con:settings/><con:config><script>import groovy.json.JsonSlurper

GetResponse("GetRouteByKey")

// /////////////////////////////
//   verify changed response 
// ///////////////////////////// 
// route 
assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey") as String))
assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("Qualifier") as String))
assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled") as String))

// tenant
assert(json.tenant.key.equals(testRunner.testCase.getPropertyValue("TenantKey") as String))
assert(json.tenant.name.equals(testRunner.testCase.getPropertyValue("TenantNameChanged") as String))
assert((json.tenant.enabled as String).equals(testRunner.testCase.getPropertyValue("TenantEnabledChanged") as String))

// application
assert(json.application.key.equals(testRunner.testCase.getPropertyValue("ApplicationKey") as String))
assert(json.application.name.equals(testRunner.testCase.getPropertyValue("ApplicationName") as String))
assert(json.application.description.equals(testRunner.testCase.getPropertyValue("ApplicationDescription") as String))
assert((json.application.enabled as String).equals(testRunner.testCase.getPropertyValue("ApplicationEnabled") as String))

// deployment
assert(json.deployment.key.equals(testRunner.testCase.getPropertyValue("DeployKey") as String))
assert(json.deployment.version.equals(testRunner.testCase.getPropertyValue("DeployVersion") as String))
assert(json.deployment.description.equals(testRunner.testCase.getPropertyValue("DeployDescription") as String))
// assert(json.deployment.clusterName.equals(testRunner.testCase.getPropertyValue("DeployClusterName") as String)) // no longer exists 12/1/17
assert(json.deployment.applicationKey.equals(testRunner.testCase.getPropertyValue("DeployApplicationKey") as String))
assert((json.deployment.enabled as String).equals(testRunner.testCase.getPropertyValue("DeployEnabled") as String))

log.info "Verify Done"









// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String request)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(request);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String runThis)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(runThis);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PutAppByKeyChangeProperties" id="614b0b19-1b9e-401c-a392-9936c94769bf"><con:settings/><con:config service="PutAppByKey" resourcePath="/platformservice/api/v1/applications/{key}" methodName="PutAppByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutAppByKeyChangeProperties" id="715e316c-ff4b-4219-a33f-f7a768d01fe0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#ApplicationKey}",
  "name": "${#TestCase#ApplicationNameChanged}",
  "description": "${#TestCase#ApplicationDescriptionChanged}",
  "enabled": "${#TestCase#ApplicationEnabledChanged}"
}</con:request><con:originalUri>http://a.com/v1/applications/33</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8858d205-df6c-4bbc-b044-d8f2ee5a5249" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#ApplicationKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyChangedTenantAndApp" id="353f3b70-078f-46e5-9c42-1d93f1dca065"><con:settings/><con:config><script>import groovy.json.JsonSlurper

 RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

// /////////////////////////////
//   verify changed response 
// ///////////////////////////// 
// route 
assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey") as String))
assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("Qualifier") as String))
assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled") as String))

// tenant - some items changed
assert(json.tenant.key.equals(testRunner.testCase.getPropertyValue("TenantKey") as String))
assert(json.tenant.name.equals(testRunner.testCase.getPropertyValue("TenantNameChanged") as String))
assert((json.tenant.enabled as String).equals(testRunner.testCase.getPropertyValue("TenantEnabledChanged") as String))

// application - some items changed
assert(json.application.key.equals(testRunner.testCase.getPropertyValue("ApplicationKey") as String))
assert(json.application.name.equals(testRunner.testCase.getPropertyValue("ApplicationNameChanged") as String))
assert(json.application.description.equals(testRunner.testCase.getPropertyValue("ApplicationDescriptionChanged") as String))
assert((json.application.enabled as String).equals(testRunner.testCase.getPropertyValue("ApplicationEnabledChanged") as String))

// deployment
assert(json.deployment.key.equals(testRunner.testCase.getPropertyValue("DeployKey") as String))
assert(json.deployment.version.equals(testRunner.testCase.getPropertyValue("DeployVersion") as String))
assert(json.deployment.description.equals(testRunner.testCase.getPropertyValue("DeployDescription") as String))
assert(json.deployment.applicationKey.equals(testRunner.testCase.getPropertyValue("DeployApplicationKey") as String))
assert((json.deployment.enabled as String).equals(testRunner.testCase.getPropertyValue("DeployEnabled") as String))

log.info "Verify Done"

// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String request)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(request);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String runThis)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(runThis);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PutDeploymentByKeyChangeProperties" id="dbf9c2f7-6768-410b-8b7b-3bdb2b4902c4"><con:settings/><con:config service="PutDeploymentByKey" resourcePath="/platformservice/api/v1/deployments/{key}" methodName="PutDeploymentByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutDeploymentByKeyChangeProperties" id="21c4bdb0-4701-4a4d-a29d-f8691e21249a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#DeployKey}",
  "version": "${#TestCase#DeployVersionChanged}",
  "description": "${#TestCase#DeployDescriptionChanged}",
  "applicationKey": "${#TestCase#DeployApplicationKey}",
  "enabled": "${#TestCase#DeployEnabledChanged}"
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/deployments/BOB_AUTO</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0490ed69-17f8-4098-b114-01c3f54d5671" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#DeployKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyChangedTenantAppAndDeployment" id="aed12e2e-e5c2-40ba-8e77-fbe4b9877bc8"><con:settings/><con:config><script>import groovy.json.JsonSlurper




 RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

// /////////////////////////////
//   verify changed response 
// ///////////////////////////// 
// route 
assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey") as String))
assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("Qualifier") as String))
assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled") as String))

// tenant - some items changed
assert(json.tenant.key.equals(testRunner.testCase.getPropertyValue("TenantKey") as String))
assert(json.tenant.name.equals(testRunner.testCase.getPropertyValue("TenantNameChanged") as String))
assert((json.tenant.enabled as String).equals(testRunner.testCase.getPropertyValue("TenantEnabledChanged") as String))

// application - some items changed
assert(json.application.key.equals(testRunner.testCase.getPropertyValue("ApplicationKey") as String))
assert(json.application.name.equals(testRunner.testCase.getPropertyValue("ApplicationNameChanged") as String))
assert(json.application.description.equals(testRunner.testCase.getPropertyValue("ApplicationDescriptionChanged") as String))
assert((json.application.enabled as String).equals(testRunner.testCase.getPropertyValue("ApplicationEnabledChanged") as String))

// deployment - some items changed
assert(json.deployment.key.equals(testRunner.testCase.getPropertyValue("DeployKey") as String))
assert(json.deployment.version.equals(testRunner.testCase.getPropertyValue("DeployVersionChanged") as String))
assert(json.deployment.description.equals(testRunner.testCase.getPropertyValue("DeployDescriptionChanged") as String))
assert(json.deployment.applicationKey.equals(testRunner.testCase.getPropertyValue("DeployApplicationKey") as String))
assert((json.deployment.enabled as String).equals(testRunner.testCase.getPropertyValue("DeployEnabledChanged") as String))

log.info "Verify Done"

// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String request)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(request);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String runThis)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(runThis);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PutAppByKey_ToOrig" id="2bfa89df-b5b7-49d2-aea8-350b10502f57"><con:settings/><con:config service="PutAppByKey" resourcePath="/platformservice/api/v1/applications/{key}" methodName="PutAppByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutAppByKey_ToOrig" id="715e316c-ff4b-4219-a33f-f7a768d01fe0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#ApplicationKey}",
  "name": "${#TestCase#ApplicationName}",
  "description": "${#TestCase#ApplicationDescription}",
  "enabled": "${#TestCase#ApplicationEnabled}"
}</con:request><con:originalUri>http://a.com/v1/applications/33</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a90cbcd5-f518-4b04-b74a-45627be8252c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#ApplicationKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PutTenantByKey_ToOrig" id="131445dc-5d25-4430-8d0f-115ef5b694d6"><con:settings/><con:config service="PutTenantByKey" resourcePath="/platformservice/api/v1/tenants/{key}" methodName="PutTenantByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutTenantByKey_ToOrig" id="4b0200e8-83ed-4f98-a973-8346e3ded06e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
   "key": "${#TestCase#TenantKey}",
   "name": "${#TestCase#TenantName}",
   "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/tenant/BAUTO</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="289485af-4874-48f7-baf8-5d12e25b5cd9" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#TenantKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PutDeploymentByKey_ToOrig" id="fc33f40b-f267-45b2-8be2-ed5086c6ae74"><con:settings/><con:config service="PutDeploymentByKey" resourcePath="/platformservice/api/v1/deployments/{key}" methodName="PutDeploymentByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutDeploymentByKey_ToOrig" id="21c4bdb0-4701-4a4d-a29d-f8691e21249a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#DeployKey}",
  "version": "${#TestCase#DeployVersion}",
  "description": "${#TestCase#DeployDescription}",
  "applicationKey": "${#TestCase#DeployApplicationKey}",
  "enabled": "${#TestCase#DeployEnabled}"
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/deployments/33</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ec7485c-8011-4098-9cdc-ab1a5c2a1b7a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#DeployKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyTenantAppDeploymentBackToOriginal" id="d594b41a-082c-48b6-b69a-ea21bd635227"><con:settings/><con:config><script>import groovy.json.JsonSlurper

 RunGet("GetRouteByKey")
GetResponse("GetRouteByKey")

// /////////////////////////////
//   verify evrything is back to normal.
// ///////////////////////////// 

// route 
assert(json.key.equals(testRunner.testCase.getPropertyValue("RouteKey") as String))
assert(json.qualifier.equals(testRunner.testCase.getPropertyValue("Qualifier") as String))
assert((json.enabled as String).equals(testRunner.testCase.getPropertyValue("RouteEnabled") as String))

// tenant - some items changed
assert(json.tenant.key.equals(testRunner.testCase.getPropertyValue("TenantKey") as String))
assert(json.tenant.name.equals(testRunner.testCase.getPropertyValue("TenantName") as String))
assert((json.tenant.enabled as String).equals(testRunner.testCase.getPropertyValue("TenantEnabled") as String))

// application - some items changed
assert(json.application.key.equals(testRunner.testCase.getPropertyValue("ApplicationKey") as String))
assert(json.application.name.equals(testRunner.testCase.getPropertyValue("ApplicationName") as String))
assert(json.application.description.equals(testRunner.testCase.getPropertyValue("ApplicationDescription") as String))
assert((json.application.enabled as String).equals(testRunner.testCase.getPropertyValue("ApplicationEnabled") as String))

// deployment - some items changed
assert(json.deployment.key.equals(testRunner.testCase.getPropertyValue("DeployKey") as String))
assert(json.deployment.version.equals(testRunner.testCase.getPropertyValue("DeployVersion") as String))
assert(json.deployment.description.equals(testRunner.testCase.getPropertyValue("DeployDescription") as String))
assert(json.deployment.applicationKey.equals(testRunner.testCase.getPropertyValue("DeployApplicationKey") as String))
assert((json.deployment.enabled as String).equals(testRunner.testCase.getPropertyValue("DeployEnabled") as String))

log.info "Verify Done"

// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
void GetResponse(String request)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(request);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String runThis)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(runThis);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:properties><con:property><con:name>RouteKey</con:name><con:value>DEP_AUTO:BAUTO:AUTOMATION</con:value></con:property><con:property><con:name>RouteEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>Qualifier</con:name><con:value>AUTOMATION</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>BAUTO</con:value></con:property><con:property><con:name>TenantName</con:name><con:value>for automation</con:value></con:property><con:property><con:name>TenantEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>TenantNameChanged</con:name><con:value>for automation changed</con:value></con:property><con:property><con:name>TenantEnabledChanged</con:name><con:value>false</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>ApplicationName</con:name><con:value>bobDeployTest</con:value></con:property><con:property><con:name>ApplicationDescription</con:name><con:value>descBobDeployTest</con:value></con:property><con:property><con:name>ApplicationEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>BOB_AUTO</con:value></con:property><con:property><con:name>DeployVersion</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployDescription</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployClusterName</con:name><con:value>don't need</con:value></con:property><con:property><con:name>DeployApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>DeployEnabled</con:name><con:value>false</con:value></con:property><con:property><con:name>ApplicationNameChanged</con:name><con:value>bobDeployTestChanged</con:value></con:property><con:property><con:name>ApplicationDescriptionChanged</con:name><con:value>descBobDeployTestChanged</con:value></con:property><con:property><con:name>ApplicationEnabledChanged</con:name><con:value>false</con:value></con:property><con:property><con:name>DeployVersionChanged</con:name><con:value>goodChanged</con:value></con:property><con:property><con:name>DeployDescriptionChanged</con:name><con:value>goodChanged</con:value></con:property><con:property><con:name>DeployEnabledChanged</con:name><con:value>true</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d7bb5599-7ffd-4860-91fa-b3d80ba28448</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2bfa89df-b5b7-49d2-aea8-350b10502f57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>614b0b19-1b9e-401c-a392-9936c94769bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>353f3b70-078f-46e5-9c42-1d93f1dca065</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aed12e2e-e5c2-40ba-8e77-fbe4b9877bc8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>642e28eb-9dd2-4786-9e9f-64dd0e3c80f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="f5bd4c7c-3268-4c50-ae43-3f86629358d8" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="RMINF_108_PostRouteChanges_AUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="6932cf47-a4d1-4138-94c2-9e91bcb10f88"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="READ!!_Init" id="9ec58599-3efd-462c-9da1-254eea48d17e"><con:settings/><con:config><script>/*
1) Need app = DEP_AUTO
2) Need Deployment = 'Bob_Auto' with App key 'DEP_AUTO' from above
3) Tenant 'Bauto' associated with Dep_Auto app above
4) Connect deployment 'Bob_Auto' to tenant 'Bauto'
5) Route name is 'Route_Auto'

SEE VALUES SHOWN AT VERY BOTTOM OF THIS SCRIPT
 */

// setup test case properties to expected values


String state = "false" // this is for setting include apps include tenant, and include deployment fields.
testRunner.testCase.setPropertyValue("IncludeApplication", state)
testRunner.testCase.setPropertyValue("IncludeTenant", state)
testRunner.testCase.setPropertyValue("IncludeDeployment", state)

// route key, qualifier, and enabled
// testRunner.testCase.setPropertyValue("RouteKey", "ROUTE_AUTO") // old
testRunner.testCase.setPropertyValue("RouteKey", "DEP_AUTO:BAUTO:AUTOMATION") // this type of key was added 12/7/17

//DEP_AUTO:BAUTO:AUTOMATION
testRunner.testCase.setPropertyValue("RouteEnabled", "true")
testRunner.testCase.setPropertyValue("Qualifier", "AUTOMATION")

// tenant
testRunner.testCase.setPropertyValue("TenantKey", "BAUTO")
testRunner.testCase.setPropertyValue("TenantName", "for automation")
testRunner.testCase.setPropertyValue("TenantEnabled", "true")

// application
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("ApplicationName", "bobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationDescription", "descBobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationEnabled", "true")

// deployment
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO")
testRunner.testCase.setPropertyValue("DeployVersion", "good")
testRunner.testCase.setPropertyValue("DeployDescription", "good")
testRunner.testCase.setPropertyValue("DeployClusterName", "don't need")
testRunner.testCase.setPropertyValue("DeployApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployEnabled", "false")

log.info "First Init Complete"

// the tenant, application, and deployment need to be setup as shown below.
 /*
{
   "key": "ROUTE_AUTO",
   "qualifier": "AUTOMATION",
   "tenant":    {
      "key": "BAUTO",
      "name": "for automation",
      "enabled": true
   },
   "application":    {
      "key": "DEP_AUTO",
      "name": "bobDeployTest",
      "description": "descBobDeployTest",
      "enabled": true
   },
   "deployment":    {
      "key": "BOB_AUTO",
      "version": "good",
      "description": "good",
      "clusterName": "don't need",
      "applicationKey": "DEP_AUTO",
      "enabled": false
   },
   "enabled": true
}











  
  */</script></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKeyRealQualifier" id="71d02c39-bb65-4e63-920b-e8ccb313ae34"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKeyRealQualifier" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes/DEP_AUTO%3ABAUTO%3AAUTOMATION</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="DEP_AUTO:BAUTO:AUTOMATION"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKeyDefaultQualifier" id="1caa58a2-3679-47ad-8be2-749d31548d7e"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKeyDefaultQualifier" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes/DEP_AUTO%3ABAUTO%3ADEFAULT</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="DEP_AUTO:BAUTO:DEFAULT"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteWithBadQualifier" id="fadfb92c-edd9-43e5-bde6-0c41e62b0364"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteWithBadQualifier" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "234_bad@",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="634535e3-6d87-46c0-a1ab-9cffac0cb587" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5057ad6-9ca2-4ca8-bfeb-31a341b82c96" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Cannot save route - : qualifier is invalid due to:   qualifier can only contain the following characters: letters, numbers, underscores</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteWithQualifier" id="14a75772-04ad-4417-b3e1-ceaa3686a6f2"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteWithQualifier" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="6af8fb40-50bd-4501-b313-61acfe467385" name="Match content of [tenantKey]"><con:configuration><path>$['tenantKey']</path><content>BAUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f76d98b5-a359-4c14-b6ca-56b2472676d3" name="Match content of [applicationKey]"><con:configuration><path>$['applicationKey']</path><content>DEP_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="471421f3-a06d-418a-8df8-26d307906136" name="Match content of [deploymentKey]"><con:configuration><path>$['deploymentKey']</path><content>BOB_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="702c3419-ae2e-4060-b0d3-0c597bb23eb8" name="Match content of [enabled]"><con:configuration><path>$['enabled']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72e45a95-63c5-4495-a229-5ea65be59b88" name="Match content of [key]"><con:configuration><path>$['key']</path><content>DEP_AUTO:BAUTO:AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e20faae-802d-429d-b625-b5f45a7fa637" name="Match content of [qualifier]"><con:configuration><path>$['qualifier']</path><content>AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1bb638fd-b559-4563-8d51-11c91fab9c9c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteNoQualifier" id="4de600fd-7e09-468c-a81a-071b686a60df"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteNoQualifier" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="e3d57e06-fdb7-443d-920a-7a466e8fbe02" name="Match content of [key]"><con:configuration><path>$['key']</path><content>DEP_AUTO:BAUTO:DEFAULT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abb4dfb6-c84a-4b34-9113-f0869ada1514" name="Match content of [qualifier]"><con:configuration><path>$['qualifier']</path><content>DEFAULT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6108d274-d42e-4c02-b2b0-1d123148c7d8" name="Match content of [tenantKey]"><con:configuration><path>$['tenantKey']</path><content>BAUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3647106-10a3-442d-9eb0-8cd19e1a23b0" name="Match content of [applicationKey]"><con:configuration><path>$['applicationKey']</path><content>DEP_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d74d6e49-26ef-4156-9d14-6624a3f3a6d7" name="Match content of [deploymentKey]"><con:configuration><path>$['deploymentKey']</path><content>BOB_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcbe251f-6baa-49f5-bdcc-02b1dcc1d4aa" name="Match content of [enabled]"><con:configuration><path>$['enabled']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="8a5ded05-ebb3-4f61-b7ed-a34c300c5673" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ValidateDeleteRouteByKeyRealQualifier" id="8970d156-8213-437c-adac-252d1e50c50d"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ValidateDeleteRouteByKeyRealQualifier" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes/DEP_AUTO%3ABAUTO%3AAUTOMATION</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b893235d-fba5-4333-a6da-26a760351ef2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="DEP_AUTO:BAUTO:AUTOMATION"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ValidateDeleteRouteByKeyDefaultQualifier" id="13ceafb2-b2a3-4288-805c-1921fc444053"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ValidateDeleteRouteByKeyDefaultQualifier" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes/DEP_AUTO%3ABAUTO%3ADEFAULT</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4e681ccf-51a7-42ca-b888-8fceb09fe04e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204
</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value=" Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="DEP_AUTO:BAUTO:DEFAULT"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyRouteKeyAutoGeneratedFormats" id="af4cac2e-fdbd-453e-b644-e19ec4459a59"><con:settings/><con:config><script>import groovy.json.JsonSlurper

String state = "false" // this is for setting include apps include tenant, and include deployment fields.
testRunner.testCase.setPropertyValue("IncludeApplication", state)
testRunner.testCase.setPropertyValue("IncludeTenant", state)
testRunner.testCase.setPropertyValue("IncludeDeployment", state)

// /////////////////////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////////////////
// For each route name in the routes collection, verify the route name is a combination of 
// its app key, teantant key, and qualifier.
// /////////////////////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////////////////

// run the GetRoutes
RunGet("GetRoutes")
GetResponse("GetRoutes")

// ////////////////////////////////////////////////////////////////////
// Verify the route names with short response from 'GetRoutes'
// ////////////////////////////////////////////////////////////////////

log.info " Verify route names using short response."

// store away the items needed for creating the route key name.
appKeyList = json.routes.applicationKey
tenantKeyList = json.routes.tenantKey
qualifierList = json.routes.qualifier

assert(appKeyList.size() == tenantKeyList.size())
assert(tenantKeyList.size() == qualifierList.size())

for(int x = 0; x &lt; appKeyList.size(); x++)
{
	//log.info "Verifying route key name " + json.routes[x].key
	assert((appKeyList[x] + ":" + tenantKeyList[x] + ":" + qualifierList[x]).equals(json.routes[x].key))
}

// ////////////////////////////////////////////////////////////////////
// Verify the route names with long response from 'GetRoutes'
// ////////////////////////////////////////////////////////////////////

state = "true" // this is for setting include apps include tenant, and include deployment fields.
testRunner.testCase.setPropertyValue("IncludeApplication", state)
testRunner.testCase.setPropertyValue("IncludeTenant", state)
testRunner.testCase.setPropertyValue("IncludeDeployment", state)

// run the GetRoutes
RunGet("GetRoutes")
GetResponse("GetRoutes")


// store away the items needed for creating the route key name.
appKeyList = json.routes.application.key
tenantKeyList = json.routes.tenant.key
qualifierList = json.routes.qualifier

assert(appKeyList.size() == tenantKeyList.size())
assert(tenantKeyList.size() == qualifierList.size())

// this verifies the route names of each route in the 'GetRoutes' response by combining the appKey name, tenantKey name, and qualifier with a ":" in between them.


log.info " Verify route names using long response."

for(int x = 0; x &lt; appKeyList.size(); x++)
{
	//log.info "Verifying route key name " + json.routes[x].key
	assert((appKeyList[x] + ":" + tenantKeyList[x] + ":" + qualifierList[x]).equals(json.routes[x].key))	
}


// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// 										Helpers
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////////


void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="1f15c983-cfed-466f-9bba-aa599670201a"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5e4a272d-e196-4a05-a657-9a94b5d07fe7" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="${#TestCase#includeApplication}"/>
  <con:entry key="includeTenant" value="${#TestCase#includeTenant}"/>
  <con:entry key="pageSize" value="300"/>
  <con:entry key="includeDeployment" value="${#TestCase#includeDeployment}"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteWithQualifierTooLong" id="53e4286c-ae2d-4afe-b7f6-00e7cca9e16c"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteWithQualifierTooLong" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "1234567890123",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="e75f0bee-6286-4ee2-bc6c-e2816ef16720" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97526890-b598-4782-a13d-cf6a4b825171" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_INVALID_QUALIFIER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6ae491b-fabf-456c-aa8c-93247c17612b" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Cannot save route - : qualifier is invalid due to:   qualifier cannot exceed 10 characters</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>IncludeApplication</con:name><con:value>true</con:value></con:property><con:property><con:name>IncludeTenant</con:name><con:value>true</con:value></con:property><con:property><con:name>IncludeDeployment</con:name><con:value>true</con:value></con:property><con:property><con:name>RouteKey</con:name><con:value>DEP_AUTO:BAUTO:AUTOMATION</con:value></con:property><con:property><con:name>RouteEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>Qualifier</con:name><con:value>AUTOMATION</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>BAUTO</con:value></con:property><con:property><con:name>TenantName</con:name><con:value>for automation</con:value></con:property><con:property><con:name>TenantEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>ApplicationName</con:name><con:value>bobDeployTest</con:value></con:property><con:property><con:name>ApplicationDescription</con:name><con:value>descBobDeployTest</con:value></con:property><con:property><con:name>ApplicationEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>BOB_AUTO</con:value></con:property><con:property><con:name>DeployVersion</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployDescription</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployClusterName</con:name><con:value>don't need</con:value></con:property><con:property><con:name>DeployApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>DeployEnabled</con:name><con:value>false</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1caa58a2-3679-47ad-8be2-749d31548d7e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fadfb92c-edd9-43e5-bde6-0c41e62b0364</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="5edb68ea-3def-4eca-a28a-2cc8e74002b7" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="PostRouteMissingItems_AUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="debae312-2f08-4817-8cb7-f6b50e27328a"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Setup" id="f0e38795-def0-4209-8e59-1f4161d3937d"><con:settings/><con:config><script>/*
1) Need app = DEP_AUTO
2) Need Deployment = 'Bob_Auto' with App key 'DEP_AUTO' from above
3) Tenant 'Bauto' associated with Dep_Auto app above
4) Connect deployment 'Bob_Auto' to tenant 'Bauto'
5) Route name is 'Route_Auto'

SEE VALUES SHOWN AT VERY BOTTOM OF THIS SCRIPT
 */


// route key, qualifier, and enabled
// testRunner.testCase.setPropertyValue("RouteKey", "ROUTE_AUTO") // old
testRunner.testCase.setPropertyValue("RouteKey", "DEP_AUTO:BAUTO:AUTOMATION") // this type of key was added 12/7/17 
testRunner.testCase.setPropertyValue("TenantKey", "BAUTO")
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO")
testRunner.testCase.setPropertyValue("Qualifier", "AUTOMATION")
testRunner.testCase.setPropertyValue("RouteEnabled", "true")


/*
//DEP_AUTO:BAUTO:AUTOMATION
testRunner.testCase.setPropertyValue("RouteEnabled", "true")
testRunner.testCase.setPropertyValue("Qualifier", "AUTOMATION")

// tenant
testRunner.testCase.setPropertyValue("TenantKey", "BAUTO")
testRunner.testCase.setPropertyValue("TenantName", "for automation")
testRunner.testCase.setPropertyValue("TenantEnabled", "true")

// application
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("ApplicationName", "bobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationDescription", "descBobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationEnabled", "true")

// deployment
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO")
testRunner.testCase.setPropertyValue("DeployVersion", "good")
testRunner.testCase.setPropertyValue("DeployDescription", "good")
testRunner.testCase.setPropertyValue("DeployClusterName", "don't need")
testRunner.testCase.setPropertyValue("DeployApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployEnabled", "false")
*/
log.info "First Init Complete"

// the tenant, application, and deployment need to be setup as shown below.
 /*
{
   "key": "ROUTE_AUTO",
   "qualifier": "AUTOMATION",
   "tenant":    {
      "key": "BAUTO",
      "name": "for automation",
      "enabled": true
   },
   "application":    {
      "key": "DEP_AUTO",
      "name": "bobDeployTest",
      "description": "descBobDeployTest",
      "enabled": true
   },
   "deployment":    {
      "key": "BOB_AUTO",
      "version": "good",
      "description": "good",
      "clusterName": "don't need",
      "applicationKey": "DEP_AUTO",
      "enabled": false
   },
   "enabled": true
}











  
  */</script></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKey" id="9d49e3df-2ba5-4472-863e-cd689b16f100"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKey" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/DEP_AUTO%3ABAUTO%3AAUTOMATION</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteMissingTenant" id="9b76166f-95a3-4af9-ac16-548f8ebceed4"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteMissingTenant" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": "${#TestCase#RouteEnabled}"
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="73719511-c930-4a9d-af66-6469aa184ed7" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9fad3bc4-d7b3-422b-bd29-aaf206109816" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_TENANT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6dff58e-312e-4c43-8e40-44d9987af27f" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated tenant key was not specified</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteMissingAppKey" id="31d80577-198d-4238-b59a-2047515e7131"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteMissingAppKey" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": "${#TestCase#RouteEnabled}"
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="73719511-c930-4a9d-af66-6469aa184ed7" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5ba6a54-8e70-4cef-9bf4-e386555fb0f9" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_APPLICATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f76cc07-bad4-4a96-9e35-b060cdabeab4" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated application key was not specified</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteMissingDeploymentKey" id="baeedd11-b72d-455e-85cc-e0490853c4b1"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteMissingDeploymentKey" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": "${#TestCase#RouteEnabled}"
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="73719511-c930-4a9d-af66-6469aa184ed7" name="Match content of [statusCode]"><con:configuration><path>$['statusCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa10ce15-ddc5-4647-9145-46ab668481cd" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Unable to add route because associated deployment key was not specified</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac40fe1d-4883-471f-9731-cc394b0475ea" name="Match content of [errorCode]"><con:configuration><path>$['errorCode']</path><content>PLATFORM_SERVICE_ROUTE_MUST_HAVE_DEPLOYMENT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteMissingEnabled" id="56a7e4fa-333e-4d24-8fbc-4dc83bb1c819"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteMissingEnabled" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}"
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="JsonPath Match" id="d6176cef-dec2-4b1c-b3c8-3c5f17f957f0" name="Match content of [enabled]"><con:configuration><path>$['enabled']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fbc7c908-de01-42a0-9771-8cb96fbe2a36" name="Match content of [key]"><con:configuration><path>$['key']</path><content>DEP_AUTO:BAUTO:AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a90c342b-8b00-4fde-a5d2-22a22abcb545" name="Match content of [qualifier]"><con:configuration><path>$['qualifier']</path><content>AUTOMATION</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe0f1df0-cece-4d17-8c1b-4b23e19e6592" name="Match content of [tenantKey]"><con:configuration><path>$['tenantKey']</path><content>BAUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12a9f0ec-fe77-4b97-b8dd-c08fbd0fcf43" name="Match content of [applicationKey]"><con:configuration><path>$['applicationKey']</path><content>DEP_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bae4645-4912-4aa2-8ecd-7e69e2325a2d" name="Match content of [deploymentKey]"><con:configuration><path>$['deploymentKey']</path><content>BOB_AUTO</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="97af87c3-85e7-4b22-ab50-2f405bbf03e9" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRouteByKeyAfterMissingEnabled" id="89ce9b11-ee27-48f1-bee4-fe223951f5ca"><con:settings/><con:config service="DeleteRouteByKey" resourcePath="/platformservice/api/v1/routes/{key}" methodName="DeleteRouteByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRouteByKeyAfterMissingEnabled" id="7a28a9d0-d30d-4cad-9103-4e90cfb1280e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/routes/DEP_AUTO%3ABAUTO%3AAUTOMATION</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cdb7328b-73ce-44a5-ac3c-c95ab326ecac" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#RouteKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostRouteReset" id="36062f6a-5578-4cb6-86ae-b71b72822864"><con:settings/><con:config service="PostRoute" resourcePath="/platformservice/api/v1/routes" methodName="PostRoute" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostRouteReset" id="ce9538eb-c691-4204-9a58-3e53e16736de" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "tenantKey": "${#TestCase#TenantKey}",
  "applicationKey": "${#TestCase#ApplicationKey}",
  "deploymentKey": "${#TestCase#DeployKey}",
  "qualifier": "${#TestCase#Qualifier}",
  "enabled": true
}</con:request><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="97af87c3-85e7-4b22-ab50-2f405bbf03e9" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#Token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>RouteKey</con:name><con:value>DEP_AUTO:BAUTO:AUTOMATION</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>BAUTO</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>BOB_AUTO</con:value></con:property><con:property><con:name>Qualifier</con:name><con:value>AUTOMATION</con:value></con:property><con:property><con:name>RouteEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f0e38795-def0-4209-8e59-1f4161d3937d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89ce9b11-ee27-48f1-bee4-fe223951f5ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9bf90f9e-44f2-4100-96a2-be668f359b1a" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="FilterCombinations_AUTOMATE!" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="891a57e8-1f72-4c21-b24e-d473426b69e5"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="32ea3d99-c5c8-44f9-8535-a6f01167a481"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="32ecd308-b6d0-4c79-850b-e287c26368dc" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value=" Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
  <con:entry key="qualifier" value="${#TestCase#Qualifier}"/>
  <con:entry key="applicationKey" value="${#TestCase#ApplicationKey}"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="pageSize" value="300"/>
  <con:entry key="version" value="${#TestCase#Version}"/>
  <con:entry key="enabled" value="${#TestCase#Enabled}"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReturnSingleRoute" id="7a019ba9-da6d-4955-8d0a-307cda470a7d"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// these method calls do this:
// 1) find a random route by index. 
// 2) store all of the indexed route's details. 
// 3) setup test case properties that will be used for filtering the indexed route 
// 4) these are the test case properties that will be used for 'Mode.MaximumFilters' filtering.
//    (tenant key, tenant name, deployment key, application, qualifier, and enabled)
// 4) these are the test case properties that will be used for 'Mode.MinimumFilters' filtering. These properties are what Ed 
//    said make a route unique. (tenant key, application key, qualifier)
// 5) 'numberOfLoopsToRun' is how many times to run this test.
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int numberOfLoopsToRun = 20

LoopOnFilters(Mode.MaximumFilters, numberOfLoopsToRun)
LoopOnFilters(Mode.MinimumFilters, numberOfLoopsToRun)

log.info " ----- Test Complete. --------"

return

/ ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

void ClearProps()
{
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")
}

String RemoveBrackets(String str)
{
	return str.replace("[","").replace("]", "")
}

enum Mode
{
	MaximumFilters,
	MinimumFilters
}


// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// this method call does this:
// 1) find a random route by index. 
// 2) store all of the indexed route's details. 
// 3) setup test case properties that will be used for filtering the indexed route 
// 4) these are the test case properties that will be used for 'Mode.MaximumFilters' filtering.
//    (tenant key, tenant name, deployment key, application, qualifier, and enabled)
// 4) these are the test case properties that will be used for 'Mode.MinimumFilters' filtering. These properties are what Ed 
//    said make a route unique. (tenant key, application ket, qualifier)
// 5) 'numberOfLoopsToRun' is how many times to run this test.
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LoopOnFilters(Mode mode, int numberOfLoopsToRun)
{
	
	int maxNumRoutes = 0
	int routeIndexToQuery = 0
	Random random = new Random()
	String tempEnabled = ""

	for(int loop = 0; loop &lt; numberOfLoopsToRun; loop++)
	{
		log.info "Loop Counter = " + loop + " ***************************************************************"
	
		ClearProps()
		
		RunGet("GetRoutes")
		GetResponse("GetRoutes")
		
		// find a random index from the total count of routes.
		maxNumRoutes = json.metadata.totalCount
		
		// routeIndexToQuery =  Math.abs(new Random().nextInt() % maxNumRoutes)
		routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)
		
		log.info "Index being queried = " + routeIndexToQuery
		log.info "Route being filtered for is " + json.routes[routeIndexToQuery].key
		
		if(mode.equals(Mode.MaximumFilters))
		{
			log.info "Filtering On MaximumFilters"
			// now set the test case properties to filter on the route found at index 'routeIndexToQuery'.
			testRunner.testCase.setPropertyValue("ApplicationKey", json.routes[routeIndexToQuery].application.key)
			testRunner.testCase.setPropertyValue("TenantKey", json.routes[routeIndexToQuery].tenant.key)
			testRunner.testCase.setPropertyValue("DeploymentKey", json.routes[routeIndexToQuery].deployment.key)
			testRunner.testCase.setPropertyValue("Qualifier", json.routes[routeIndexToQuery].qualifier)
			testRunner.testCase.setPropertyValue("Version", json.routes[routeIndexToQuery].deployment.version)
			testRunner.testCase.setPropertyValue("Enabled", json.routes[routeIndexToQuery].enabled as String)			
		}
		else
		{
			log.info "Filtering Om MinimumFilters"
			testRunner.testCase.setPropertyValue("ApplicationKey", json.routes[routeIndexToQuery].application.key)
			testRunner.testCase.setPropertyValue("TenantKey", json.routes[routeIndexToQuery].tenant.key)
			testRunner.testCase.setPropertyValue("Qualifier", json.routes[routeIndexToQuery].qualifier)
		}
		
		// store away all expected responses for the result 
		routeKey = json.routes[routeIndexToQuery].key
		qualifier = json.routes[routeIndexToQuery].qualifier
		tenantKey = json.routes[routeIndexToQuery].tenant.key
		tenantName = json.routes[routeIndexToQuery].tenant.name
		tenantEnabled = json.routes[routeIndexToQuery].tenant.enabled
		appKey = json.routes[routeIndexToQuery].application.key
		appName = json.routes[routeIndexToQuery].application.name
		appDescription = json.routes[routeIndexToQuery].application.description
		appEnabled = json.routes[routeIndexToQuery].application.enabled
		deployKey = json.routes[routeIndexToQuery].deployment.key
		deployVersion = json.routes[routeIndexToQuery].deployment.version
		deployDescription = json.routes[routeIndexToQuery].deployment.description
		deployAppKey = json.routes[routeIndexToQuery].deployment.applicationKey
		deployEnabled = json.routes[routeIndexToQuery].deployment.enabled
		
		RunGet("GetRoutes")
		GetResponse("GetRoutes")

		assert(json.metadata.totalCount == 1)
		
		// //////////////////////////////////////////////////////////////////////////
		// the 'GetRoutes' request has been run. now verify the response results.
		// //////////////////////////////////////////////////////////////////////////
		assert(RemoveBrackets(json.routes.key).equals(routeKey))
		assert(RemoveBrackets(json.routes.qualifier).equals(qualifier))
		assert(RemoveBrackets(json.routes.tenant.key).equals(tenantKey))
		assert(RemoveBrackets(json.routes.tenant.name).equals(tenantName))
		assert(RemoveBrackets(json.routes.tenant.enabled as String).equals(tenantEnabled as String))
		assert(RemoveBrackets(json.routes.application.key).equals(appKey))
		assert(RemoveBrackets(json.routes.application.name).equals(appName))	
		assert(RemoveBrackets(json.routes.application.description).equals(appDescription))	
		assert(RemoveBrackets(json.routes.application.enabled as String).equals(appEnabled as String))
		assert(RemoveBrackets(json.routes.deployment.key).equals(deployKey))
		assert(RemoveBrackets(json.routes.deployment.version).equals(deployVersion))
		assert(RemoveBrackets(json.routes.deployment.description).equals(deployDescription))	
		assert(RemoveBrackets(json.routes.deployment.applicationKey).equals(appKey))	
		assert(RemoveBrackets(json.routes.deployment.enabled as String).equals(deployEnabled as String))
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="QuerySingleRoute" id="c8e248a4-3d36-43d0-92e3-e5a1b3faa106" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// find a random route by index. store all of it's details. setup test case properties that will be uses for filtering 
// the indexed route (tenant key, tenant name, deployment key, application, qualifier, and enabled)
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int maxNumRoutes = 0
int routeIndexToQuery = 0
Random random = new Random()
String tempEnabled = ""

for(int loop = 0; loop &lt; 20; loop++)
{
	log.info "Loop Counter = " + loop + " ***************************************************************"

	ClearProps()
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")
	
	// find a random index from the total count of routes.
	maxNumRoutes = json.metadata.totalCount
	
	// routeIndexToQuery =  Math.abs(new Random().nextInt() % maxNumRoutes)
	routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)
	
	log.info "Index being queried = " + routeIndexToQuery
	
	// now set the test case properties to filter on the route found at index 'routeIndexToQuery'.
	testRunner.testCase.setPropertyValue("ApplicationKey", json.routes[routeIndexToQuery].application.key)
	testRunner.testCase.setPropertyValue("TenantKey", json.routes[routeIndexToQuery].tenant.key)
	testRunner.testCase.setPropertyValue("DeploymentKey", json.routes[routeIndexToQuery].deployment.key)
	testRunner.testCase.setPropertyValue("Qualifier", json.routes[routeIndexToQuery].qualifier)
	testRunner.testCase.setPropertyValue("Version", json.routes[routeIndexToQuery].deployment.version)
	testRunner.testCase.setPropertyValue("Enabled", json.routes[routeIndexToQuery].enabled as String)
	
	// store away all expected responses for the result 
	routeKey = json.routes[routeIndexToQuery].key
	qualifier = json.routes[routeIndexToQuery].qualifier
	tenantKey = json.routes[routeIndexToQuery].tenant.key
	tenantName = json.routes[routeIndexToQuery].tenant.name
	tenantEnabled = json.routes[routeIndexToQuery].tenant.enabled
	appKey = json.routes[routeIndexToQuery].application.key
	appName = json.routes[routeIndexToQuery].application.name
	appDescription = json.routes[routeIndexToQuery].application.description
	appEnabled = json.routes[routeIndexToQuery].application.enabled
	deployKey = json.routes[routeIndexToQuery].deployment.key
	deployVersion = json.routes[routeIndexToQuery].deployment.version
	deployDescription = json.routes[routeIndexToQuery].deployment.description
	deployAppKey = json.routes[routeIndexToQuery].deployment.applicationKey
	deployEnabled = json.routes[routeIndexToQuery].deployment.enabled
	
	log.info "Route being filtered for is " + json.routes[routeIndexToQuery].key
	
	RunGet("GetRoutes")
	GetResponse("GetRoutes")
	
	// //////////////////////////////////////////////////////////////////////////
	// the 'GetRoutes' request has been run. now verify the response results.
	// //////////////////////////////////////////////////////////////////////////
	
	assert(RemoveBrackets(json.routes.key).equals(routeKey))
	assert(RemoveBrackets(json.routes.qualifier).equals(qualifier))
	assert(RemoveBrackets(json.routes.tenant.key).equals(tenantKey))
	assert(RemoveBrackets(json.routes.tenant.name).equals(tenantName))
	assert(RemoveBrackets(json.routes.tenant.enabled as String).equals(tenantEnabled as String))
	assert(RemoveBrackets(json.routes.application.key).equals(appKey))
	assert(RemoveBrackets(json.routes.application.name).equals(appName))	
	assert(RemoveBrackets(json.routes.application.description).equals(appDescription))	
	assert(RemoveBrackets(json.routes.application.enabled as String).equals(appEnabled as String))
	assert(RemoveBrackets(json.routes.deployment.key).equals(deployKey))
	assert(RemoveBrackets(json.routes.deployment.version).equals(deployVersion))
	assert(RemoveBrackets(json.routes.deployment.description).equals(deployDescription))	
	assert(RemoveBrackets(json.routes.deployment.applicationKey).equals(appKey))	
	assert(RemoveBrackets(json.routes.deployment.enabled as String).equals(deployEnabled as String))
}

return



/*
listRouteKeys = json.routes.key

for(String str : listRouteKeys)
{
	if(str.contains("DEFAULT"))
	{
		log.info str
	}
}

for(String str : listRouteKeys)
{
	if(str.contains("DEP_AUTO:BAUTO"))
	{
		//log.info str
	}
}
*/
return

/ ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

void ClearProps()
{
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")
}

String RemoveBrackets(String str)
{
	return str.replace("[","").replace("]", "")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="DisabledWorkHere_MaybeContinue" id="3d5f5d4b-efc9-4f95-b8a2-6d7192625cb7" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////////
// 				find routes that have "default" in their key
// /////////////////////////////////////////////////////////////////////////////////////////////////


// ////////////////////////   OBSOLETE ------------------------------------- 1/2/18 ----------------------   OBSOLETE

ClearProps()
RunGet("GetRoutes")
GetResponse("GetRoutes")

String tenant = ""
String app = ""

listRouteKeys = json.routes.key

int tempIndex  = 0

tenantList = []
appList = []
partialRouteKeyList =  []

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// find a route key with "default" in it's key . store the tenant, app and partial keyname (app and tenant) that goes with it.
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
for(String str : listRouteKeys)
{
	if(str.contains("DEFAULT"))
	{
		//log.info str
		//log.info tempIndex
		tenant = json.routes[tempIndex].tenant.key
		
		//tenantList.add(json.routes[tempIndex].tenant.key)
		//appList.add(json.routes[tempIndex].application.key)
		partialRouteKeyList.add(json.routes[tempIndex].key.split(":")[0]  +  ":" +  json.routes[tempIndex].key.split(":")[1])
	}
	
	tempIndex++
}

log.info "these are the app:tenant combinations."

for(String str: partialRouteKeyList)
{
	log.info str
}

return

log.info"-----------"

tempIndex  = 0
innerCounter = 0
String currentname


// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// at this point the 'partialRouteKeyList' has partial route key names (tenant:app) that contain "DEFAULT" in their full key 
// 
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
for(String str : partialRouteKeyList)
{
	log.info 	"Search for this patial route key name: " + partialRouteKeyList.get(tempIndex)

	for(int x = 0; x &lt; listRouteKeys.size(); x++)
	{
		if(listRouteKeys.get(x).contains(partialRouteKeyList.get(tempIndex)))
		{
			log.info "Key: " + listRouteKeys.get(x)
			currentName = listRouteKeys.get(x)
		}
	}
	tempIndex++
}

return

/ ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

void ClearProps()
{
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")
}

public class AppTenant
{
	String m_RouteKey = ""
	String m_PartialRouteKey = ""	
	String m_AppKey = ""
	String m_TenantKey = ""
	int m_NumOccurrences = 0

	public AppTenant(String routeKey, appKey, tenantKey)
	{
		 m_NumOccurrences++;
		 
	}




}
</script></con:config></con:testStep><con:testStep type="groovy" name="UseThis_DisabledWorkHere_MaybeContinue" id="8f68dff8-719b-40be-a74e-8803117e5a8e" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////////
// 				find routes that have "default" in their key
// /////////////////////////////////////////////////////////////////////////////////////////////////

ClearProps()
RunGet("GetRoutes")
GetResponse("GetRoutes")

String tenant = ""
String app = ""

listAllRouteKeys = json.routes.key
// listAllTenantKeys = json.routes.tenant.key


int tempIndex  = 0

//tenantList = []
//appList = []
partialRouteKeyList =  []

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// find a route key with "default" in it's key . store the tenant, app and partial keyname (app and tenant) that goes with it.
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
for(String str : listAllRouteKeys)
{
	if(str.contains("DEFAULT"))
	{
		//log.info str
		//log.info tempIndex
		tenant = json.routes[tempIndex].tenant.key
		
		//tenantList.add(json.routes[tempIndex].tenant.key)
		//appList.add(json.routes[tempIndex].application.key)
		partialRouteKeyList.add(json.routes[tempIndex].key.split(":")[0]  +  ":" +  json.routes[tempIndex].key.split(":")[1])
	}
	
	tempIndex++
}

log.info "these are the app:tenant combinations."

for(String str: partialRouteKeyList)
{
	log.info "------------------ " + str
	LoopForTenantAppPair(str, listAllRouteKeys)
}

return

//log.info"-----------"

//tempIndex  = 0
//innerCounter = 0
//String currentname

//							BELOW not used - 1/2/18

/*
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// at this point the 'partialRouteKeyList' has partial route key names (tenant:app) that contain "DEFAULT" in their full key 
// 
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
for(String str : partialRouteKeyList)
{
	log.info 	"Search for this patial route key name: " + partialRouteKeyList.get(tempIndex)

	for(int x = 0; x &lt; listAllRouteKeys.size(); x++)
	{
		if(listAllRouteKeys.get(x).contains(partialRouteKeyList.get(tempIndex)))
		{
			log.info "Key: " + listAllRouteKeys.get(x)
			currentName = listAllRouteKeys.get(x)
		}
	}
	tempIndex++
}
*/

return

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 										helpers
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ///////////////////////////////////////////////////////////////////////////////////////
// * receive a app/tenant pair and all of the route keys in a GetRoutes request.
// * go through the route keys and find all routes that have the app/tenant pair 
//   in them.
// * for each route key that's found to have the app/tenant pair in it's key name, add
//   the route key to the 'listHoldsRouteKeysForAppTenantPair' list.
// ////////////////////////////////////////////////////////////////////////////////////////
void LoopForTenantAppPair(String tenantAppPair, def listAllRouteKeys)
{
	listHoldsRouteKeysForAppTenantPair = []
	
	// go trhough all route keys
	for(int x = 0; x &lt; listAllRouteKeys.size(); x++) 
	{
		if(listAllRouteKeys.get(x).contains(tenantAppPair))
		{
			log.info "Key found tha has tenant/app pair: " +  tenantAppPair + " = " + listAllRouteKeys.get(x)
			listHoldsRouteKeysForAppTenantPair.add(listAllRouteKeys.get(x))
		}
	}

	// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// at this point all the route keys that have passed-in string 'tenantAppPair' in their name are 
	// added to the 'listHoldsRouteKeysForAppTenantPair' list
	// clear all the filters and set the GetRoutes request filters tenant and app fields using the 'tenantAppPair' string.
	// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ClearProps()

	testRunner.testCase.setPropertyValue("ApplicationKey", tenantAppPair.split(":")[0])
	testRunner.testCase.setPropertyValue("TenantKey", tenantAppPair.split(":")[1])		

	// run the request with filter settings.
	RunGet("GetRoutes")
	GetResponse("GetRoutes")

	// the response should contain the three routes found in the 'listHoldsRouteKeysForAppTenantPair' list.
	
	// verify number of routes in response are the same as the number of routes in the 'listHoldsRouteKeysForAppTenantPair' list. 
	assert(listHoldsRouteKeysForAppTenantPair.size() == json.routes.size())

	log.info json.routes.size()

	// the 

	for(String str : json.routes.key)
	{
		//log.info "verify " + str
		assert(listHoldsRouteKeysForAppTenantPair.contains(str))
	}


	
}






void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

void ClearProps()
{
	testRunner.testCase.setPropertyValue("ApplicationKey", "")
	testRunner.testCase.setPropertyValue("TenantKey", "")
	testRunner.testCase.setPropertyValue("DeploymentKey", "")
	testRunner.testCase.setPropertyValue("Qualifier", "")
	testRunner.testCase.setPropertyValue("Version", "")
	testRunner.testCase.setPropertyValue("Enabled", "")
}

public class AppTenant
{
	String m_RouteKey = ""
	String m_PartialRouteKey = ""	
	String m_AppKey = ""
	String m_TenantKey = ""
	int m_NumOccurrences = 0

	public AppTenant(String routeKey, appKey, tenantKey)
	{
		 m_NumOccurrences++;
		 
	}




}
</script></con:config></con:testStep><con:properties><con:property><con:name>ApplicationKey</con:name><con:value>RVM</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>APR</con:value></con:property><con:property><con:name>DeploymentKey</con:name><con:value/></con:property><con:property><con:name>Qualifier</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>Enabled</con:name><con:value/></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxOTkyOTA0OX0.rWZgFd9vVDn9aMFZu2S9ZLlQwJAH9TI0Ywx4_EKxw_jR1FJbhPqCqQyS1bj7sKEJNKOTrn-dNwmrycK2CxYfMw</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>32ea3d99-c5c8-44f9-8535-a6f01167a481</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8e248a4-3d36-43d0-92e3-e5a1b3faa106</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a019ba9-da6d-4955-8d0a-307cda470a7d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7f13417e-a5ec-4358-9b38-2915ff7bb3c8" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="ResetRouteItems" searchProperties="true" timeout="0" disabled="true" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="f1a593d6-7b5d-4776-b63f-9ce79f563f30"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Setup" id="f2fe12be-88fc-4b32-9900-57660951bd48" disabled="true"><con:settings/><con:config><script>// tenant
testRunner.testCase.setPropertyValue("TenantKey", "BAUTO")
testRunner.testCase.setPropertyValue("TenantName", "for automation")
testRunner.testCase.setPropertyValue("TenantEnabled", "true")

// application
testRunner.testCase.setPropertyValue("ApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("ApplicationName", "bobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationDescription", "descBobDeployTest")
testRunner.testCase.setPropertyValue("ApplicationEnabled", "true")

// deployment
testRunner.testCase.setPropertyValue("DeployKey", "BOB_AUTO")
testRunner.testCase.setPropertyValue("DeployVersion", "good")
testRunner.testCase.setPropertyValue("DeployDescription", "good")
testRunner.testCase.setPropertyValue("DeployApplicationKey", "DEP_AUTO")
testRunner.testCase.setPropertyValue("DeployEnabled", "false")

log.info "Setup Done"</script></con:config></con:testStep><con:testStep type="restrequest" name="PutAppByKey_ToOrig" id="ed584da5-e05d-4a21-a5d4-c70701be4244" disabled="true"><con:settings/><con:config service="PutAppByKey" resourcePath="/platformservice/api/v1/applications/{key}" methodName="PutAppByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutAppByKey_ToOrig" id="715e316c-ff4b-4219-a33f-f7a768d01fe0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#ApplicationKey}",
  "name": "${#TestCase#ApplicationName}",
  "description": "${#TestCase#ApplicationDescription}",
  "enabled": "${#TestCase#ApplicationEnabled}"
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/applications/DEP_AUTO</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="key" value="${#TestCase#ApplicationKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PutTenantByKey_ToOrig" id="5e45fbdf-babf-4e0b-9f0e-d9fa89fbfb21" disabled="true"><con:settings/><con:config service="PutTenantByKey" resourcePath="/platformservice/api/v1/tenants/{key}" methodName="PutTenantByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutTenantByKey_ToOrig" id="4b0200e8-83ed-4f98-a973-8346e3ded06e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
   "key": "${#TestCase#TenantKey}",
   "name": "${#TestCase#TenantName}",
   "enabled": true
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/tenants/BAUTO</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="key" value="${#TestCase#TenantKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PutDeploymentByKey_ToOrig" id="6a0e0f66-8e9c-4612-bc96-371cc36edeca" disabled="true"><con:settings/><con:config service="PutDeploymentByKey" resourcePath="/platformservice/api/v1/deployments/{key}" methodName="PutDeploymentByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PutDeploymentByKey_ToOrig" id="21c4bdb0-4701-4a4d-a29d-f8691e21249a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request>{
  "key": "${#TestCase#DeployKey}",
  "version": "${#TestCase#DeployVersion}",
  "description": "${#TestCase#DeployDescription}",
  "applicationKey": "${#TestCase#DeployApplicationKey}",
  "enabled": "${#TestCase#DeployEnabled}"
}</con:request><con:originalUri>http://dc2devrmapp44.prod.tangoe.com/v1/deployments/BOB_AUTO</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="key" value="${#TestCase#DeployKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>TenantKey</con:name><con:value>BAUTO</con:value></con:property><con:property><con:name>TenantName</con:name><con:value>for automation</con:value></con:property><con:property><con:name>TenantEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>ApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>ApplicationName</con:name><con:value>bobDeployTest</con:value></con:property><con:property><con:name>ApplicationDescription</con:name><con:value>descBobDeployTest</con:value></con:property><con:property><con:name>ApplicationEnabled</con:name><con:value>true</con:value></con:property><con:property><con:name>DeployKey</con:name><con:value>BOB_AUTO</con:value></con:property><con:property><con:name>DeployVersion</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployDescription</con:name><con:value>good</con:value></con:property><con:property><con:name>DeployApplicationKey</con:name><con:value>DEP_AUTO</con:value></con:property><con:property><con:name>DeployEnabled</con:name><con:value>false</con:value></con:property><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxNzY5MjIwMH0.rBTwPMR6vZ-hOcBXYDM6lWcxqFCaa4JqOx2y2CP91k_bFUMdDqXWMsclXYBitGTELE7f-vXh8wn3PjgTNJ7ZLw</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:8055</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f2fe12be-88fc-4b32-9900-57660951bd48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9652435d-3e52-41ac-8ffc-a8587a1bdfbc" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC986_GetRoutesFilterCombinations_Automate" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="NOTES_READ" id="60e58ece-3bbd-4584-9edb-bd65e6bdd6c3"><con:settings/><con:config><script>
// these two routes are needed.

 
 /*
 {
    "key": "RVM:APR:DEFAULT",
    "qualifier": "DEFAULT",
    "tenant":          {
       "key": "APR",
       "name": "Apple Records",
       "enabled": true
    },
    "application":          {
       "key": "RVM",
       "name": "Rivermine",
       "description": "Rivermine Application",
       "enabled": true
    },
    "deployment":          {
       "key": "APP_RVM_2.0.0",
       "version": "2.0.0",
       "description": "This is the standard Rivermine deployment for version 2.0",
       "applicationKey": "RVM",
       "enabled": true
    },
    "enabled": true
 },

 
 {
    "key": "RVM:APR:TEST",
    "qualifier": "TEST",
    "tenant":          {
       "key": "APR",
       "name": "Apple Records",
       "enabled": true
    },
    "application":          {
       "key": "RVM",
       "name": "Rivermine",
       "description": "Rivermine Application",
       "enabled": true
    },
    "deployment":          {
       "key": "APP_RVM_2.0.0",
       "version": "2.0.0",
       "description": "This is the standard Rivermine deployment for version 2.0",
       "applicationKey": "RVM",
       "enabled": true
    },
    "enabled": true
}
*/</script></con:config></con:testStep><con:testStep type="groovy" name="SetupToken" id="6ae6a886-44f9-4b46-bf20-b1c733a9fee8"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}

return

// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***
/*
groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 


String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileName = projectPath + "\\tokenGenerated.txt"

readTokenFromFile(fileName, log, testRunner)

return


// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readTokenFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			SetupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in ReadTokenPair method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void SetupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	if (inputLine.contains("Token"))
	{  
		// log.info strArray[1]
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "Token:" + testRunner.testCase.getPropertyValue("Token")		
	}
	
}
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="SetupTestCaseProperties" id="d4c51723-c39a-4357-9dbb-5220260f4618"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("MainRoute", "")
testRunner.testCase.setPropertyValue("DefaultRoute", "")
testRunner.testCase.setPropertyValue("Enabled", "")
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="ae99f501-35e6-4724-ba31-49c0db57f42e"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/api/v1/routes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a2d919fb-2940-4d27-bc34-e54fbf7828ff" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
  <con:entry key="qualifier" value="${#TestCase#Qualifier}"/>
  <con:entry key="applicationKey" value="${#TestCase#AppKey}"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="pageSize" value="300"/>
  <con:entry key="version" value="${#TestCase#Version}"/>
  <con:entry key="enabled" value="${#TestCase#Enabled}"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyRequiredInfoInResponseWithSetup" id="b4dddbfe-cae1-4aa5-8ee8-cc650ee196f8"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// there are two routes that are needed to run the test:
String mainRoute = "RVM:APR:TEST"
String defaultRoute = "RVM:APR:DEFAULT"

// these are the common tenant, app, and deployment keys.
String tenantKey = "APR"
String applicationKey = "RVM"
// ////////////////////////////////////////////////////////////////////////////////////////////
// 						this verifies required routes exist
// ///////////////////////////////////////////////////////////////////////////////////////////
String depoloymentKey = "APP_RVM_2.0.0"

GetResponse("GetRoutes")

for(int x = 0; x &lt; json.routes.key.size(); x++)
{
	if((json.routes[x].key).equals(mainRoute)) // verify main route
	{
		log.info "Verify main route exists"
		
		if(!json.routes[x].deployment.key.equals(depoloymentKey))
		{
			throw new Exception("Necessary deployment key not found in 'VerifyRequiredInfoInResponseWithSetup'.")
		}

		if(!json.routes[x].tenant.key.equals(tenantKey))
		{
			throw new Exception("Necessary tenant key not found in 'VerifyRequiredInfoInResponseWithSetup'.")
		}

		if(!json.routes[x].application.key.equals(applicationKey))
		{
			throw new Exception("Necessary applicatiuon key not found in 'VerifyRequiredInfoInResponseWithSetup'.")
		}
	}

	if((json.routes[x].key).equals(defaultRoute)) // verify default route
	{
		log.info "Verify default route exists"
		
		if(!json.routes[x].deployment.key.equals(depoloymentKey))
		{
			throw new Exception("Necessary deployment key not found in 'VerifyRequiredInfoInResponseWithSetup'.")
		}

		if(!json.routes[x].tenant.key.equals(tenantKey))
		{
			throw new Exception("Necessary tenant key not found in 'VerifyRequiredInfoInResponseWithSetup'.")
		}

		if(!json.routes[x].application.key.equals(applicationKey))
		{
			throw new Exception("Necessary applicatiuon key not found in 'VerifyRequiredInfoInResponseWithSetup'.")
		}		
	}
}

testRunner.testCase.setPropertyValue("TenantKey", tenantKey)
testRunner.testCase.setPropertyValue("AppKey", applicationKey)
testRunner.testCase.setPropertyValue("DeploymentKey", depoloymentKey)
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("MainRoute", mainRoute)
testRunner.testCase.setPropertyValue("DefaultRoute", defaultRoute)
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("Enabled", "")

log.info "VerifyRequiredInfoInResponseWithSetup done"

// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////
// 										helpers
// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}</script></con:config></con:testStep><con:testStep type="groovy" name="Steps_1_2_3" id="3331f21d-0657-4cd4-8ce7-0727fd8c216c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// //////////////////////////////////////////////////////////////////////////////////////////
// NOTE: precondition was done in the last test step.
// 1) Set these query values and run GetRoutes request:
//    applicationKey = rvm
//    tenantKey = apr
//    deploymentKey = APP_RVM_2.0.0
// 2) Two routes with these keys are returned
//    RVM:APR:DEFAULT
//    RVM:APR:TEST
// 3) Application, tenant, and deployment keys are correct per the query parameters.
// //////////////////////////////////////////////////////////////////////////////////////////

boolean mainRouteFound = false
boolean defaultRouteFound = false
String tempString = ""

RunGet("GetRoutes")
GetResponse("GetRoutes")

// thare should be two routes returned.
assert(json.metadata.totalCount == 2)
assert(json.routes.key.size() == 2)
assert(json.routes.tenant.key.size() == 2)
assert(json.routes.deployment.key.size() == 2)
assert(json.routes.application.key.size() == 2)

// verify correct route keys.
for(String str: json.routes.key)
{
	if(str.equals(testRunner.testCase.getPropertyValue("MainRoute")))
	{
		mainRouteFound = true
	}
	
	if(str.equals(testRunner.testCase.getPropertyValue("DefaultRoute")))
	{
		defaultRouteFound = true	
	}
}

if(!(mainRouteFound &amp;&amp; defaultRouteFound))
{
	throw new Exception("Incorrect route values found in 'Steps_1_2_3'.")	
}

VerifyDeployTenantApp()

// //////////////////////////////////////////////////////////////////////////////////////////
// Set the qualifier query to "test"  and run GetRoutes request.
// Only the RVM:APR:TEST route is returned
// //////////////////////////////////////////////////////////////////////////////////////////

testRunner.testCase.setPropertyValue("Qualifier", "test")

RunGet("GetRoutes")
GetResponse("GetRoutes")

testRunner.testCase.setPropertyValue("Qualifier", "") 

// thare should be one route returned.
assert(json.metadata.totalCount == 1)
assert(json.routes.key.size() == 1)
assert(json.routes.tenant.key.size() == 1)
assert(json.routes.deployment.key.size() == 1)
assert(json.routes.application.key.size() == 1)

tempString = (json.routes.key as String).replace("[","").replace("]","")

if(!tempString.equals(testRunner.testCase.getPropertyValue("MainRoute")))
{
	throw new Exception("Incorrect route found in 'Steps_1_2_3'.")	
}

VerifyDeployTenantApp()

// //////////////////////////////////////////////////////////////////////////////////////////
// Set the qualifier query to "default"  and run GetRoutes request.
// Only the RVM:APR:DEFAULT route is returned
// //////////////////////////////////////////////////////////////////////////////////////////

testRunner.testCase.setPropertyValue("Qualifier", "default")

RunGet("GetRoutes")
GetResponse("GetRoutes")

testRunner.testCase.setPropertyValue("Qualifier", "") 

// thare should be one route returned.
assert(json.metadata.totalCount == 1)
assert(json.routes.key.size() == 1)
assert(json.routes.tenant.key.size() == 1)
assert(json.routes.deployment.key.size() == 1)
assert(json.routes.application.key.size() == 1)

tempString = (json.routes.key as String).replace("[","").replace("]","")

if(!tempString.equals(testRunner.testCase.getPropertyValue("DefaultRoute")))
{
	throw new Exception("Incorrect route found in 'Steps_1_2_3'.")	
}

VerifyDeployTenantApp()


log.info "'Steps_1_2_3' done"

// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////
// 										helpers
// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////

void VerifyDeployTenantApp()
{

	log.info "Verify deployment, tenant, and apps."
	
	// verify correct deployments
	for(String str: json.routes.deployment.key)
	{
		if(!str.equals(testRunner.testCase.getPropertyValue("DeploymentKey")))
		{
			throw new Exception("Failure in deployment key in 'Steps_1_2_3'.")	
		}
	}
	
	// verify correct tenants
	for(String str: json.routes.tenant.key)
	{
		if(!str.equals(testRunner.testCase.getPropertyValue("TenantKey")))
		{
			throw new Exception("Failure in tenant key in 'Steps_1_2_3'.")	
		}
	}
	
	// verify correct apps
	for(String str: json.routes.application.key)
	{
		if(!str.equals(testRunner.testCase.getPropertyValue("AppKey")))
		{
			throw new Exception("Failure in application key in 'Steps_1_2_3'.")	
		}
	}
}


void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}</script></con:config></con:testStep><con:testStep type="groovy" name="Steps_4_5_6" id="14ac165e-e3dd-4634-bab8-e882982178b4"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 1) Clear all filters except the Include tenant,  include application, and include deployment filters.
// 2) Run GetRoutes with applicationKey = rvm
// 3) Look through the routes, find two or more routes with the same version, and record the number of routes found with the same version value.
// 4) Set the version query to the same version value and run GetRoutes.
// 5) The only routes returned have app name = rvm and version = the version query value
// 6) The number of routes returned is the number recorded.
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

String appKey = "RVM"

// set app key to be used and clear everything else.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", appKey)
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("MainRoute", "")
testRunner.testCase.setPropertyValue("DefaultRoute", "")
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("Enabled", "")

RunGet("GetRoutes")
GetResponse("GetRoutes")

versionList = []	
versionList = json.routes.deployment.version

int largestNumberOfSameVersions = 0
String version = ""

// find the version with most occurrences
for(String str: versionList)
{
	//log.info str
	//log.info versionList.count(str)

	if((versionList.count(str) as int) > largestNumberOfSameVersions)
	{
		largestNumberOfSameVersions = versionList.count(str)
		version = str
	}
}

// make sure at least two versions were found.
if(largestNumberOfSameVersions &lt; 2)
{
	throw new Exception("Number of routes for a specific application key " + testRunner.testCase.getPropertyValue("AppKey"))		
}

log.info "Number of identical versions = " + largestNumberOfSameVersions
log.info "Selected version = " + version

// make a routes request using the app and version 
testRunner.testCase.setPropertyValue("Version", version)
RunGet("GetRoutes")
GetResponse("GetRoutes")

// verify the number of routes with the same version is correct.
assert(json.metadata.totalCount == largestNumberOfSameVersions)

// verify deployments are all the same and versions are all the same.
for(int x = 0; x &lt; json.routes.deployment.version.size(); x++)
{
	//log.info 	json.routes[x].deployment.version
	//log.info 	json.routes[x].application.key

	assert(json.routes[x].deployment.version.equals(version))
	assert(json.routes[x].application.key.equals(appKey))	
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Record how many of the returned routes in the step above have enabled = true and how many have enabled =  false. 
// Run GetRoutes with enabled = true.
// The number of routes returned is the number recorded for enabled = true.
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int numItemsTrue = 0
int numItemsFalse = 0

// set app key to be used and clear everything else.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", appKey)
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("MainRoute", "")
testRunner.testCase.setPropertyValue("DefaultRoute", "")
testRunner.testCase.setPropertyValue("Version", "")

RunGet("GetRoutes")
GetResponse("GetRoutes")

for(String str: json.routes.enabled)
{
	// log.info str
	if(str.equals("true"))
	{
		numItemsTrue++
	}
	else
	{
		numItemsFalse++
	}
}

//log.info numItemsTrue
//log.info numItemsFalse

// set app key to be used and enabled field.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", appKey)
testRunner.testCase.setPropertyValue("DeploymentKey", "")
testRunner.testCase.setPropertyValue("Qualifier", "")
testRunner.testCase.setPropertyValue("MainRoute", "")
testRunner.testCase.setPropertyValue("DefaultRoute", "")
testRunner.testCase.setPropertyValue("Version", "")
testRunner.testCase.setPropertyValue("Enabled", "true")

// run with enabled true and verify result.
RunGet("GetRoutes")
GetResponse("GetRoutes")

assert(json.metadata.totalCount == numItemsTrue)

//Run GetRoutes with enabled = false.
//The number of routes returned is the number recorded for enabled = false.

// set enabled false
testRunner.testCase.setPropertyValue("Enabled", "false")

// run with enabled false and verify result.
RunGet("GetRoutes")
GetResponse("GetRoutes")

assert(json.metadata.totalCount == numItemsFalse)

// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////
// 										helpers
// //////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}</script></con:config></con:testStep><con:properties><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value/></con:property><con:property><con:name>AppKey</con:name><con:value>RVM</con:value></con:property><con:property><con:name>DeploymentKey</con:name><con:value/></con:property><con:property><con:name>MainRoute</con:name><con:value/></con:property><con:property><con:name>DefaultRoute</con:name><con:value/></con:property><con:property><con:name>Qualifier</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>Enabled</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b4dddbfe-cae1-4aa5-8ee8-cc650ee196f8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c51723-c39a-4357-9dbb-5220260f4618</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3331f21d-0657-4cd4-8ce7-0727fd8c216c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14ac165e-e3dd-4634-bab8-e882982178b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="6a80c4c2-590b-407c-bae1-1a3f48f9c27c" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC840_RoutesAndExternalDeletes" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="SetupToken" id="00b72109-c687-48e0-8c03-46e50486a5b8"><con:settings/><con:config><script>// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***  
// *** JANUARY 3 -- ADDING READING URL (HOSTNAME) FROM FILE ***

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 

String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileNameToken = projectPath + "\\tokenGenerated.txt"
String fileNameURL = projectPath + "\\platformServiceHostName.txt"

readDataFromFile(fileNameToken, log, testRunner)
readDataFromFile(fileNameURL, log, testRunner)

return

// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readDataFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			setupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in readDataFromFile method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void setupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	// log.info strArray[1]
	
	if (inputLine.contains("Token"))
	{  
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "  Token: " + testRunner.testCase.getPropertyValue("Token")		
	
	} else if (inputLine.contains("URL"))
	{
		testRunner.testCase.setPropertyValue("URL",strArray[1])
		log.info "  Hostname URL: " + testRunner.testCase.getPropertyValue("URL")	
	}
	
}




// OLD

// *** ADDED DECEMBER 26 -- TRYING SECURITY TOKEN ***
/*
groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 


String projectPath = groovyUtils.projectPath //gets the path of the project root
String fileName = projectPath + "\\tokenGenerated.txt"

readTokenFromFile(fileName, log, testRunner)

return


// read in each line of token pair file and send to SetupTestSuiteVariables method for creating token pair file.
static boolean readTokenFromFile(fileName, log, testRunner)
{
	try
	{
		new File(fileName).eachLine 
		{ 
			line ->	
			//log.info line
			SetupTestSuiteVariables(line ,log, testRunner)
		}
	}
	catch (all)
	{
		log.info "    File read failed in ReadTokenPair method."
		return false
	}
	return true
}

// put token into test suite property if line contains one of the tokens.
static void SetupTestSuiteVariables(inputLine, log, testRunner)
{
	def strArray = []
	strArray = inputLine.split("=")
	
	if (inputLine.contains("Token"))
	{  
		// log.info strArray[1]
		testRunner.testCase.setPropertyValue("Token",strArray[1])
		log.info "Token:" + testRunner.testCase.getPropertyValue("Token")		
	}
	
}
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="ClearTestCaseVariables" id="23f07a4a-f5bd-45e2-add8-7f6305172f74"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRoutes" id="1ff7c0d1-5f75-4bfe-a3ab-828885e9707e" disabled="true"><con:settings/><con:config service="GetRoutes" resourcePath="/platformservice/api/v1/routes" methodName="GetRoutes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRoutes" id="84d37d26-b254-47b0-936f-c3ab7f11496c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/api/v1/routes</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="includeApplication" value="true"/>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
  <con:entry key="applicationKey" value="${#TestCase#AppKey}"/>
  <con:entry key="pageSize" value="300"/>
  <con:entry key="includeTenant" value="true"/>
  <con:entry key="includeDeployment" value="true"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry><con:entry>qualifier</con:entry><con:entry>version</con:entry><con:entry>enabled</con:entry><con:entry>sortBy</con:entry><con:entry>sortDirection</con:entry><con:entry>page</con:entry><con:entry>pageSize</con:entry><con:entry>includeTenant</con:entry><con:entry>includeApplication</con:entry><con:entry>includeDeployment</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step1_DeleteTenant" id="046d62ae-04d0-471d-a4a9-ae53f35892b2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////
// Delete a tenant that goes with a route
// Error occurs. The counts are correct per what has been setup with the associated route.
// /////////////////////////////////////////////////////////////////////////////////////////////

Random random = new Random()

// clear test variables.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")


RunGet("GetRoutes")
GetResponse("GetRoutes")

// find a random index from the total count of routes.
maxNumRoutes = json.metadata.totalCount

routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)

String tenantToUse = ""
String appToUse = ""
String tempString = ""
String returnMessage = ""
int numberOfRoutes = 0
int numberOfApps = 0
int numberOfDeployments = 0
appList = []


// //////////////////////////////////////////////////////////
// get tenant name
// //////////////////////////////////////////////////////////
tenantToUse = json.routes[routeIndexToQuery].tenant.key

// NOTE DEBUG !!! -- good tenant to ues ia "ANAT1" for good verification of numbers.
// tenantToUse = "ANAT1"

log.info "tenant to delete = "  + tenantToUse


// //////////////////////////////////////////////////////////
// get routes for tenant name
// //////////////////////////////////////////////////////////
// filter routes on tenant key to find number of routes for tenant   // SET TENANT
testRunner.testCase.setPropertyValue("TenantKey", tenantToUse)

RunGet("GetRoutes")
GetResponse("GetRoutes")

// store the number of routes for tenant.
numberOfRoutes = json.metadata.totalCount  

// //////////////////////////////////////////////////////////
// get apps for tenant name
// //////////////////////////////////////////////////////////

RunGet("GetAppsForTenant")
GetResponse("GetAppsForTenant")

// store the number of apps
numberOfApps = json.metadata.totalCount 
appList = json.applications.key

// //////////////////////////////////////////////////////////
// get deployments for tenant name
// //////////////////////////////////////////////////////////

RunGet("GetDeployments")
GetResponse("GetDeployments")

numberOfDeployments = json.metadata.totalCount 


log.info "Num apps for this tenant = " + appList.size()
log.info "Num deployments for this tenant = " + numberOfDeployments
log.info "Num routes for this tenant = " + numberOfRoutes

RunGet("DeleteTenantByKey")
GetResponse("DeleteTenantByKey")

// log.info json.message
returnMessage = json.message

tempString = "application assignment count: " + appList.size()
log.info tempString

assert(returnMessage.contains(tempString))

tempString = "deployment assignment count: " + numberOfDeployments
log.info tempString

assert(returnMessage.contains(tempString))

tempString = "route assignment count: " + numberOfRoutes
log.info tempString

assert(returnMessage.contains(tempString))

log.info "Tenant Delete Complete ************************* ."

return

/ ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAppsForTenant" id="34119fee-5625-4972-aa48-13486285df92" disabled="true"><con:settings/><con:config service="GetAppsForTenant" resourcePath="/platformservice/api/v1/tenants/{Key}/applications" methodName="GetAppsForTenant" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAppsForTenant" id="d3c1945d-c241-429a-b20a-3383fd09719b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/api/v1/tenants/BAUTO/applications</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="60670722-d099-4ec1-9341-7cb6a02987e0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="Key" value="${#TestCase#TenantKey}"/>
</con:parameters><con:parameterOrder><con:entry>Key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTenantByKey" id="29862f01-e7ad-46ec-830a-4277865429bf" disabled="true"><con:settings/><con:config service="DeleteTenantByKey" resourcePath="/platformservice/api/v1/tenants/{key}" methodName="DeleteTenantByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTenantByKey" id="e9ab011c-70f3-4da9-8f97-98ea50f34ba4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/api/v1/tenants/APR</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#TenantKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetTenants" id="5c3cdaa6-efcc-4825-ac79-709bcbea9ef2" disabled="true"><con:settings/><con:config service="GetTenants" resourcePath="/platformservice/api/v1/tenants" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTenants" id="44d49e3b-c891-4a64-b41e-39ba0f0ed3fc" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/api/v1/tenants</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
  <con:entry key="applicationKey" value="${#TestCase#AppKey}"/>
  <con:entry key="pageSize" value="300"/>
</con:parameters><con:parameterOrder><con:entry>pageSize</con:entry><con:entry>Authorization</con:entry><con:entry>applicationKey</con:entry><con:entry>deploymentKey</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step2_DeleteApp" id="feb30115-4e59-4d0a-b108-a234acbc896e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////
// Delete an app that goes with a route
// Error occurs. The counts are correct per what has been setup with the associated route.
// /////////////////////////////////////////////////////////////////////////////////////////////

Random random = new Random()

// clear test variables.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")

RunGet("GetRoutes")
GetResponse("GetRoutes")

// find a random index from the total count of routes.
maxNumRoutes = json.metadata.totalCount

routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)

String appToUse = ""
String tempString = ""
String returnMessage = ""
int numberOfRoutes = 0
int numberOfTenants = 0
int numberOfDeployments = 0
tenantList = []


// //////////////////////////////////////////////////////////
// get app name
// //////////////////////////////////////////////////////////
appToUse = json.routes[routeIndexToQuery].application.key

appToUse = "RVM"

log.info "app to delete = "  + appToUse

// //////////////////////////////////////////////////////////
// get routes for app name
// //////////////////////////////////////////////////////////
// filter GetRoutes on app key to find number of routes for app   // SET APP 
testRunner.testCase.setPropertyValue("AppKey", appToUse)

RunGet("GetRoutes")
GetResponse("GetRoutes")

// store the number of routes for tenant.
numberOfRoutes = json.metadata.totalCount  

// //////////////////////////////////////////////////////////
// get tenants for app name
// //////////////////////////////////////////////////////////
// filter GetTenants on app key to find number of tenants for app   // SET APP 
RunGet("GetTenants")
GetResponse("GetTenants")

numberOfTenants = json.metadata.totalCount  

// //////////////////////////////////////////////////////////
// get depoloyments for app name
// //////////////////////////////////////////////////////////

RunGet("GetDeployments")
GetResponse("GetDeployments")

numberOfDeployments = json.metadata.totalCount 

log.info "Num tenants for this app = " + numberOfTenants
log.info "Num deployments for this app = " + numberOfDeployments
log.info "Num routes for this app = " + numberOfRoutes



RunGet("DeleteAppByKey")
GetResponse("DeleteAppByKey")

// log.info json.message
returnMessage = json.message

tempString = "tenant assignment count: " + numberOfTenants
log.info tempString

assert(returnMessage.contains(tempString))

tempString = "deployment assignment count: " + numberOfDeployments
log.info tempString

assert(returnMessage.contains(tempString))

tempString = "route assignment count: " + numberOfRoutes
log.info tempString

assert(returnMessage.contains(tempString))


log.info "App Delete Complete ************************* ."

return

/ ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DeleteAppByKey" id="50003e1b-27e4-4791-b155-cde8b50a4220" disabled="true"><con:settings/><con:config service="DeleteAppByKey" resourcePath="/platformservice/api/v1/applications/{key}" methodName="DeleteAppByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteAppByKey" id="0aa47c56-5ffb-4ce7-afd6-eb28d26dc2d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/api/v1/applications/RVM</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#AppKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetDeployments" id="9fd9cd2f-21b8-4c8b-bdf2-406fdedce9fe" disabled="true"><con:settings/><con:config service="GetDeployments" resourcePath="/platformservice/api/v1/deployments" methodName="GetDeployments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetDeployments" id="459eb811-951b-448b-9a13-fcea109b5381" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/api/v1/deployments</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="applicationKey" value="${#TestCase#AppKey}"/>
</con:parameters><con:parameterOrder><con:entry>applicationKey</con:entry><con:entry>tenantKey</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step3_DeleteDeployment" id="82ac90b5-9359-4777-b9d0-2309a6697afd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////
// Delete a deployment that goes with a route
// Error occurs. The counts are correct per what has been setup with the associated route.
// /////////////////////////////////////////////////////////////////////////////////////////////

String deploymentToUse = ""
int numberOfRoutes = 0
int numberOfApps = 0
int numberOfTenants = 0

Random random = new Random()

// clear test variables.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")

RunGet("GetRoutes")
GetResponse("GetRoutes")

// find a random index from the total count of routes.
maxNumRoutes = json.metadata.totalCount

routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)

// //////////////////////////////////////////////////////////
// get deployment name
// //////////////////////////////////////////////////////////
deploymentToUse = json.routes[routeIndexToQuery].deployment.key

//deploymentToUse = "APP_RVM_1.0.0"

log.info "deployment to delete = "  + deploymentToUse

// //////////////////////////////////////////////////////////
// get routes for deplpyment key
// //////////////////////////////////////////////////////////
// filter GetRoutes on app key to find number of routes for app   // SET APP 
testRunner.testCase.setPropertyValue("DeploymentKey", deploymentToUse)

RunGet("GetRoutes")
GetResponse("GetRoutes")

// store the number of routes for tenant.
numberOfRoutes = json.metadata.totalCount  

// log.info "# apps = " + numberOfApps
log.info "# routes = " + numberOfRoutes

// //////////////////////////////////////////////////////////
// get tenants for deplpoyment name
// //////////////////////////////////////////////////////////
RunGet("GetTenants")
GetResponse("GetTenants")

// store the number of tenants for deployment.
numberOfTenants = json.metadata.totalCount  

log.info "# tenants = " + numberOfTenants

RunGet("DeleteDeploymentByKey")
GetResponse("DeleteDeploymentByKey")

// log.info json.message
returnMessage = json.message

tempString = "tenant assignment count: " + numberOfTenants
log.info tempString

assert(returnMessage.contains(tempString))

tempString = "route assignment count: " + numberOfRoutes
log.info tempString

assert(returnMessage.contains(tempString))


log.info "Deployment Delete Complete ************************* ."

return

// ///////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetApplications" id="b74954dd-db2d-49ee-8698-11eeb9acdd20" disabled="true"><con:settings/><con:config service="GetApplications" resourcePath="/platformservice/api/v1/applications" methodName="GetApplications" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetApplications" id="f8f6d51a-3074-4861-9b09-f4a56e5f442f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://a.com/platformservice/api/v1/applications</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="60065df8-e831-4550-aa34-49e1fa0674bb" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
  <con:entry key="pageSize" value="300"/>
</con:parameters><con:parameterOrder><con:entry>pageSize</con:entry><con:entry>Authorization</con:entry><con:entry>deploymentKey</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteDeploymentByKey" id="b83c20e0-d64e-471f-ba32-9524a4d774c6" disabled="true"><con:settings/><con:config service="DeleteDeploymentByKey" resourcePath="/platformservice/api/v1/deployments/{key}" methodName="DeleteDeploymentByKey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteDeploymentByKey" id="c4a5545a-cbd6-472f-aa6d-d8bb52acfbae" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/deployments/BOB_AUTO</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5fb361d3-5b80-44b1-8673-99b3d0c5fc0d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="key" value="${#TestCase#DeploymentKey}"/>
</con:parameters><con:parameterOrder><con:entry>key</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step4_UnassignTenantFromApp" id="d6f8daf1-3248-4d1b-a2a8-54654d49b607"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////
// Try to unassign tenant from app,  the tenant/app are part of a route
// Error occurs. The counts of routes is correct.
// /////////////////////////////////////////////////////////////////////////////////////////////

String tenantToUse = ""
String appToUse = ""
String expectedMessage = ""
String actualMessage = ""
int numberOfRoutes = 0

Random random = new Random()

// clear test variables.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")

RunGet("GetRoutes")
GetResponse("GetRoutes")

// find a random index from the total count of routes.
maxNumRoutes = json.metadata.totalCount

routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)

// ////////////////////////////////////////////////////
// record the tenant and app from the selected route.
// ////////////////////////////////////////////////////
tenantToUse = json.routes[routeIndexToQuery].tenant.key
appToUse = json.routes[routeIndexToQuery].application.key

// these have two routes
//tenantToUse = "INI"
//appToUse = "RVM"

log.info "Tenant to unassign = " + tenantToUse 
log.info "App to unassign = "  + appToUse

// set test case properties 
testRunner.testCase.setPropertyValue("TenantKey", tenantToUse)
testRunner.testCase.setPropertyValue("AppKey", appToUse)

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// run GetRoutes using tenant and app as filters to find the number of routes associated to the tenant and app.
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RunGet("GetRoutes")
GetResponse("GetRoutes")

numberOfRoutes = json.metadata.totalCount // get number of routes.

// /////////////////////////////////////////////////
// run 'UnassignAppFromTenant' and verify the error
// /////////////////////////////////////////////////
RunGet("UnassignAppFromTenant")
GetResponse("UnassignAppFromTenant")


actualMessage =  json.message as String
expectedMessage = "Cannot unassign application from tenant because there are " + numberOfRoutes + " route(s) assigned to tenant " + tenantToUse + " and application " + appToUse

log.info expectedMessage
log.info actualMessage

assert((json.message as String).equals(expectedMessage))


log.info "Step4_UnassignTenantFromApp complete ************************* ."

// ///////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}


</script></con:config></con:testStep><con:testStep type="restrequest" name="UnassignAppFromTenant" id="338a7ca1-a94c-46f4-bbfb-9d21bba6382e" disabled="true"><con:settings/><con:config service="UnassignTenantFromTenant" resourcePath="/platformservice/api/v1/tenants/{tenantKey}/applications/{appKey}" methodName="UnassignAppFromTenant" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UnassignAppFromTenant" id="60b120db-3e14-4342-85cf-eb060834938f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/tenants/applications/</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="appKey" value="${#TestCase#AppKey}"/>
</con:parameters><con:parameterOrder><con:entry>tenantKey</con:entry><con:entry>appKey</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step5_UnassignTenantFromDeployment" id="ef29a4d9-357d-4199-8abe-b3b0f75a6572"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// /////////////////////////////////////////////////////////////////////////////////////////////
// Try to unassign tenant from deployment, the deployment is part of a route.
// Error occurs. The counts ?????????????????????????????????????
// /////////////////////////////////////////////////////////////////////////////////////////////

String tenantToUse = ""
String deploymentToUse = ""
int numberOfRoutes = 0

Random random = new Random()

// clear test variables.
testRunner.testCase.setPropertyValue("TenantKey", "")
testRunner.testCase.setPropertyValue("AppKey", "")
testRunner.testCase.setPropertyValue("DeploymentKey", "")

RunGet("GetRoutes")
GetResponse("GetRoutes")

// find a random index from the total count of routes.
maxNumRoutes = json.metadata.totalCount

routeIndexToQuery =  Math.abs(random.nextInt() % maxNumRoutes)

// ///////////////////////////////////////////////////////////
// record the tenant and deployment from the selected route.
// ///////////////////////////////////////////////////////////
tenantToUse = json.routes[routeIndexToQuery].tenant.key
deploymentToUse = json.routes[routeIndexToQuery].deployment.key

//tenantToUse = "TNN_C"
//deploymentToUse = "DEP_ANA_4"

log.info "Tenant to unassign = " + tenantToUse 
log.info "Deployment to unassign = "  + deploymentToUse

// set test case properties 
testRunner.testCase.setPropertyValue("TenantKey", tenantToUse)
testRunner.testCase.setPropertyValue("DeploymentKey", deploymentToUse)

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// run GetRoutes using tenant and app as filters to find the number of routes associated to the tenant and app.
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RunGet("GetRoutes")
GetResponse("GetRoutes")

numberOfRoutes = json.metadata.totalCount // get number of routes.

// ////////////////////////////////////////////////////////////
// run 'UnassignAppFromDeployment' and verify the error
// ////////////////////////////////////////////////////////////
RunGet("UnassignTenantFromDeployment")
GetResponse("UnassignTenantFromDeployment")


actualMessage =  json.message as String

log.info actualMessage

log.info "Step4_UnassignTenantFromDeployment complete ************************* ."


// ///////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////
// 						helpers
// ////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////

void GetResponse(String item)
{
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ); 
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	response = testStep.testRequest.messageExchange.response.responseContent;
	slurper = new JsonSlurper();
	json = slurper.parseText response;
}

// setup so 'GetRoutes' request can be run
void RunGet(String item)
{
	// setup to call post new app.
	testCase = context.testCase; 
	testStep = testCase.getTestStepByName(item);  
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null); 
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep); 
	testStep.run(testRunner, testStepContext); // run get apps response
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="UnassignTenantFromDeployment" id="22a9de6a-2c6a-4daa-962e-64b116090576" disabled="true"><con:settings/><con:config service="" resourcePath="/platformservice/api/v1/tenants/{tenantKey}/deployments/{deploymentKey}" methodName="UnassignDeploymentFromTenant" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UnassignTenantFromDeployment" id="207232ed-bf99-4d93-a324-eef4c803a2a6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestCase#URL}</con:endpoint><con:request/><con:originalUri>http://dc1testrmapp03.prod.tangoe.com/platformservice/api/v1/tenants/deployments/Bearer%20eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:originalUri><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#TestCase#Token}"/>
  <con:entry key="tenantKey" value="${#TestCase#TenantKey}"/>
  <con:entry key="deploymentKey" value="${#TestCase#DeploymentKey}"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>tenantKey</con:entry><con:entry>deploymentKey</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>Token</con:name><con:value>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTUxODM4NjAyN30.uNtQogMyyGMc5aIqEsCbqDFyKgaIlpq96R_4pzVCvDylgHNkvz7f3fYVNeyVDydgJNQ2Cx7BuWhVeh_yidaTJg</con:value></con:property><con:property><con:name>URL</con:name><con:value>http://dc1testrmapp03.prod.tangoe.com:4070</con:value></con:property><con:property><con:name>TenantKey</con:name><con:value>TNN_C</con:value></con:property><con:property><con:name>AppKey</con:name><con:value/></con:property><con:property><con:name>DeploymentKey</con:name><con:value>DEP_ANA_4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>046d62ae-04d0-471d-a4a9-ae53f35892b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>23f07a4a-f5bd-45e2-add8-7f6305172f74</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29862f01-e7ad-46ec-830a-4277865429bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>82ac90b5-9359-4777-b9d0-2309a6697afd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6f8daf1-3248-4d1b-a2a8-54654d49b607</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:authRepository/><con:tags/></con:soapui-project>